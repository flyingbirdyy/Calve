<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Objects\Calve.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Objects\Calve.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 6160001: Last Updated: Tue Jan 21 19:30:29 2025
<BR><P>
<H3>Maximum Stack Usage =        664 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
__rt_entry_main &rArr; main &rArr; GetGsense &rArr; pow &rArr; __kernel_poly &rArr; __aeabi_dmul
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[6a]">__user_initial_stackheap</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[1]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1]">NMI_Handler</a><BR>
 <LI><a href="#[2]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2]">HardFault_Handler</a><BR>
 <LI><a href="#[3]">SVC_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3]">SVC_Handler</a><BR>
 <LI><a href="#[4]">PendSV_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[4]">PendSV_Handler</a><BR>
 <LI><a href="#[5]">SysTick_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[5]">SysTick_Handler</a><BR>
 <LI><a href="#[b]">ADC_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[b]">ADC_IRQHandler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[b]">ADC_IRQHandler</a> from startup_fm33lg0xx.o(.text) referenced from startup_fm33lg0xx.o(RESET)
 <LI><a href="#[19]">AES_IRQHandler</a> from startup_fm33lg0xx.o(.text) referenced from startup_fm33lg0xx.o(RESET)
 <LI><a href="#[22]">ATIM_IRQHandler</a> from startup_fm33lg0xx.o(.text) referenced from startup_fm33lg0xx.o(RESET)
 <LI><a href="#[1e]">BSTIM_IRQHandler</a> from startup_fm33lg0xx.o(.text) referenced from startup_fm33lg0xx.o(RESET)
 <LI><a href="#[25]">CAN_IRQHandler</a> from startup_fm33lg0xx.o(.text) referenced from startup_fm33lg0xx.o(RESET)
 <LI><a href="#[18]">CCL_IRQHandler</a> from startup_fm33lg0xx.o(.text) referenced from startup_fm33lg0xx.o(RESET)
 <LI><a href="#[1f]">COMPx_IRQHandler</a> from startup_fm33lg0xx.o(.text) referenced from startup_fm33lg0xx.o(RESET)
 <LI><a href="#[c]">DAC_IRQHandler</a> from startup_fm33lg0xx.o(.text) referenced from startup_fm33lg0xx.o(RESET)
 <LI><a href="#[1b]">DMA_IRQHandler</a> from startup_fm33lg0xx.o(.text) referenced from startup_fm33lg0xx.o(RESET)
 <LI><a href="#[a]">FDET_IRQHandler</a> from startup_fm33lg0xx.o(.text) referenced from startup_fm33lg0xx.o(RESET)
 <LI><a href="#[9]">FLASH_IRQHandler</a> from startup_fm33lg0xx.o(.text) referenced from startup_fm33lg0xx.o(RESET)
 <LI><a href="#[28]">FL_GPIO_SetExtiLine0</a> from fm33lg0xx_fl_exti.o(.text.FL_GPIO_SetExtiLine0) referenced from fm33lg0xx_fl_exti.o(.rodata.setExtiLineFuncs)
 <LI><a href="#[29]">FL_GPIO_SetExtiLine1</a> from fm33lg0xx_fl_exti.o(.text.FL_GPIO_SetExtiLine1) referenced from fm33lg0xx_fl_exti.o(.rodata.setExtiLineFuncs)
 <LI><a href="#[32]">FL_GPIO_SetExtiLine10</a> from fm33lg0xx_fl_exti.o(.text.FL_GPIO_SetExtiLine10) referenced from fm33lg0xx_fl_exti.o(.rodata.setExtiLineFuncs)
 <LI><a href="#[33]">FL_GPIO_SetExtiLine11</a> from fm33lg0xx_fl_exti.o(.text.FL_GPIO_SetExtiLine11) referenced from fm33lg0xx_fl_exti.o(.rodata.setExtiLineFuncs)
 <LI><a href="#[34]">FL_GPIO_SetExtiLine12</a> from fm33lg0xx_fl_exti.o(.text.FL_GPIO_SetExtiLine12) referenced from fm33lg0xx_fl_exti.o(.rodata.setExtiLineFuncs)
 <LI><a href="#[35]">FL_GPIO_SetExtiLine13</a> from fm33lg0xx_fl_exti.o(.text.FL_GPIO_SetExtiLine13) referenced from fm33lg0xx_fl_exti.o(.rodata.setExtiLineFuncs)
 <LI><a href="#[36]">FL_GPIO_SetExtiLine14</a> from fm33lg0xx_fl_exti.o(.text.FL_GPIO_SetExtiLine14) referenced from fm33lg0xx_fl_exti.o(.rodata.setExtiLineFuncs)
 <LI><a href="#[37]">FL_GPIO_SetExtiLine15</a> from fm33lg0xx_fl_exti.o(.text.FL_GPIO_SetExtiLine15) referenced from fm33lg0xx_fl_exti.o(.rodata.setExtiLineFuncs)
 <LI><a href="#[38]">FL_GPIO_SetExtiLine16</a> from fm33lg0xx_fl_exti.o(.text.FL_GPIO_SetExtiLine16) referenced from fm33lg0xx_fl_exti.o(.rodata.setExtiLineFuncs)
 <LI><a href="#[39]">FL_GPIO_SetExtiLine17</a> from fm33lg0xx_fl_exti.o(.text.FL_GPIO_SetExtiLine17) referenced from fm33lg0xx_fl_exti.o(.rodata.setExtiLineFuncs)
 <LI><a href="#[3a]">FL_GPIO_SetExtiLine18</a> from fm33lg0xx_fl_exti.o(.text.FL_GPIO_SetExtiLine18) referenced from fm33lg0xx_fl_exti.o(.rodata.setExtiLineFuncs)
 <LI><a href="#[2a]">FL_GPIO_SetExtiLine2</a> from fm33lg0xx_fl_exti.o(.text.FL_GPIO_SetExtiLine2) referenced from fm33lg0xx_fl_exti.o(.rodata.setExtiLineFuncs)
 <LI><a href="#[2b]">FL_GPIO_SetExtiLine3</a> from fm33lg0xx_fl_exti.o(.text.FL_GPIO_SetExtiLine3) referenced from fm33lg0xx_fl_exti.o(.rodata.setExtiLineFuncs)
 <LI><a href="#[2c]">FL_GPIO_SetExtiLine4</a> from fm33lg0xx_fl_exti.o(.text.FL_GPIO_SetExtiLine4) referenced from fm33lg0xx_fl_exti.o(.rodata.setExtiLineFuncs)
 <LI><a href="#[2d]">FL_GPIO_SetExtiLine5</a> from fm33lg0xx_fl_exti.o(.text.FL_GPIO_SetExtiLine5) referenced from fm33lg0xx_fl_exti.o(.rodata.setExtiLineFuncs)
 <LI><a href="#[2e]">FL_GPIO_SetExtiLine6</a> from fm33lg0xx_fl_exti.o(.text.FL_GPIO_SetExtiLine6) referenced from fm33lg0xx_fl_exti.o(.rodata.setExtiLineFuncs)
 <LI><a href="#[2f]">FL_GPIO_SetExtiLine7</a> from fm33lg0xx_fl_exti.o(.text.FL_GPIO_SetExtiLine7) referenced from fm33lg0xx_fl_exti.o(.rodata.setExtiLineFuncs)
 <LI><a href="#[30]">FL_GPIO_SetExtiLine8</a> from fm33lg0xx_fl_exti.o(.text.FL_GPIO_SetExtiLine8) referenced from fm33lg0xx_fl_exti.o(.rodata.setExtiLineFuncs)
 <LI><a href="#[31]">FL_GPIO_SetExtiLine9</a> from fm33lg0xx_fl_exti.o(.text.FL_GPIO_SetExtiLine9) referenced from fm33lg0xx_fl_exti.o(.rodata.setExtiLineFuncs)
 <LI><a href="#[3b]">FL_GPIO_SetTriggerEdge0</a> from fm33lg0xx_fl_exti.o(.text.FL_GPIO_SetTriggerEdge0) referenced from fm33lg0xx_fl_exti.o(.rodata.setTrigEdgeFuncs)
 <LI><a href="#[3c]">FL_GPIO_SetTriggerEdge1</a> from fm33lg0xx_fl_exti.o(.text.FL_GPIO_SetTriggerEdge1) referenced from fm33lg0xx_fl_exti.o(.rodata.setTrigEdgeFuncs)
 <LI><a href="#[24]">GPIO_IRQHandler</a> from interrupt.o(.text.GPIO_IRQHandler) referenced from startup_fm33lg0xx.o(RESET)
 <LI><a href="#[20]">GPTIM0_1_IRQHandler</a> from startup_fm33lg0xx.o(.text) referenced from startup_fm33lg0xx.o(RESET)
 <LI><a href="#[21]">GPTIM2_IRQHandler</a> from startup_fm33lg0xx.o(.text) referenced from startup_fm33lg0xx.o(RESET)
 <LI><a href="#[2]">HardFault_Handler</a> from startup_fm33lg0xx.o(.text) referenced from startup_fm33lg0xx.o(RESET)
 <LI><a href="#[17]">I2C_IRQHandler</a> from startup_fm33lg0xx.o(.text) referenced from startup_fm33lg0xx.o(RESET)
 <LI><a href="#[1a]">LPTIM_IRQHandler</a> from interrupt.o(.text.LPTIM_IRQHandler) referenced from startup_fm33lg0xx.o(RESET)
 <LI><a href="#[16]">LPUARTx_IRQHandler</a> from interrupt.o(.text.LPUARTx_IRQHandler) referenced from startup_fm33lg0xx.o(RESET)
 <LI><a href="#[1d]">LUT_IRQHandler</a> from startup_fm33lg0xx.o(.text) referenced from startup_fm33lg0xx.o(RESET)
 <LI><a href="#[1]">NMI_Handler</a> from startup_fm33lg0xx.o(.text) referenced from startup_fm33lg0xx.o(RESET)
 <LI><a href="#[4]">PendSV_Handler</a> from startup_fm33lg0xx.o(.text) referenced from startup_fm33lg0xx.o(RESET)
 <LI><a href="#[8]">RTC_IRQHandler</a> from interrupt.o(.text.RTC_IRQHandler) referenced from startup_fm33lg0xx.o(RESET)
 <LI><a href="#[0]">Reset_Handler</a> from startup_fm33lg0xx.o(.text) referenced from startup_fm33lg0xx.o(RESET)
 <LI><a href="#[d]">SPI0_IRQHandler</a> from startup_fm33lg0xx.o(.text) referenced from startup_fm33lg0xx.o(RESET)
 <LI><a href="#[e]">SPI1_IRQHandler</a> from startup_fm33lg0xx.o(.text) referenced from startup_fm33lg0xx.o(RESET)
 <LI><a href="#[f]">SPI2_IRQHandler</a> from startup_fm33lg0xx.o(.text) referenced from startup_fm33lg0xx.o(RESET)
 <LI><a href="#[3]">SVC_Handler</a> from startup_fm33lg0xx.o(.text) referenced from startup_fm33lg0xx.o(RESET)
 <LI><a href="#[7]">SVD_IRQHandler</a> from startup_fm33lg0xx.o(.text) referenced from startup_fm33lg0xx.o(RESET)
 <LI><a href="#[5]">SysTick_Handler</a> from startup_fm33lg0xx.o(.text) referenced from startup_fm33lg0xx.o(RESET)
 <LI><a href="#[26]">SystemInit</a> from system_fm33lg0xx.o(.text.SystemInit) referenced from startup_fm33lg0xx.o(.text)
 <LI><a href="#[15]">U7816_IRQHandler</a> from startup_fm33lg0xx.o(.text) referenced from startup_fm33lg0xx.o(RESET)
 <LI><a href="#[10]">UART0_IRQHandler</a> from startup_fm33lg0xx.o(.text) referenced from startup_fm33lg0xx.o(RESET)
 <LI><a href="#[11]">UART1_IRQHandler</a> from startup_fm33lg0xx.o(.text) referenced from startup_fm33lg0xx.o(RESET)
 <LI><a href="#[12]">UART3_IRQHandler</a> from startup_fm33lg0xx.o(.text) referenced from startup_fm33lg0xx.o(RESET)
 <LI><a href="#[13]">UART4_IRQHandler</a> from startup_fm33lg0xx.o(.text) referenced from startup_fm33lg0xx.o(RESET)
 <LI><a href="#[14]">UART5_IRQHandler</a> from startup_fm33lg0xx.o(.text) referenced from startup_fm33lg0xx.o(RESET)
 <LI><a href="#[23]">VREF_IRQHandler</a> from startup_fm33lg0xx.o(.text) referenced from startup_fm33lg0xx.o(RESET)
 <LI><a href="#[6]">WDT_IRQHandler</a> from startup_fm33lg0xx.o(.text) referenced from startup_fm33lg0xx.o(RESET)
 <LI><a href="#[1c]">WKUPx_IRQHandler</a> from startup_fm33lg0xx.o(.text) referenced from startup_fm33lg0xx.o(RESET)
 <LI><a href="#[27]">__main</a> from __main.o(!!!main) referenced from startup_fm33lg0xx.o(.text)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[27]"></a>__main</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, __main.o(!!!main))
<BR><BR>[Calls]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_fm33lg0xx.o(.text)
</UL>
<P><STRONG><a name="[3d]"></a>__scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter))
<BR><BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[3f]"></a>__scatterload_rt2</STRONG> (Thumb, 52 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[20f]"></a>__scatterload_rt2_thumb_only</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[210]"></a>__scatterload_null</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[40]"></a>__scatterload_copy</STRONG> (Thumb, 26 bytes, Stack size unknown bytes, __scatter_copy.o(!!handler_copy), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_copy
</UL>

<P><STRONG><a name="[211]"></a>__scatterload_zeroinit</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, __scatter_zi.o(!!handler_zi), UNUSED)

<P><STRONG><a name="[44]"></a>__rt_lib_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit.o(.ARM.Collect$$libinit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_li
</UL>

<P><STRONG><a name="[212]"></a>__rt_lib_init_alloca_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002E))

<P><STRONG><a name="[213]"></a>__rt_lib_init_argv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002C))

<P><STRONG><a name="[214]"></a>__rt_lib_init_atexit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001B))

<P><STRONG><a name="[215]"></a>__rt_lib_init_clock_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000021))

<P><STRONG><a name="[216]"></a>__rt_lib_init_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000032))

<P><STRONG><a name="[217]"></a>__rt_lib_init_exceptions_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000030))

<P><STRONG><a name="[218]"></a>__rt_lib_init_fp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000002))

<P><STRONG><a name="[219]"></a>__rt_lib_init_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001F))

<P><STRONG><a name="[21a]"></a>__rt_lib_init_getenv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000023))

<P><STRONG><a name="[21b]"></a>__rt_lib_init_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000A))

<P><STRONG><a name="[21c]"></a>__rt_lib_init_lc_collate_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000011))

<P><STRONG><a name="[21d]"></a>__rt_lib_init_lc_ctype_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000013))

<P><STRONG><a name="[21e]"></a>__rt_lib_init_lc_monetary_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000015))

<P><STRONG><a name="[21f]"></a>__rt_lib_init_lc_numeric_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000017))

<P><STRONG><a name="[220]"></a>__rt_lib_init_lc_time_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000019))

<P><STRONG><a name="[221]"></a>__rt_lib_init_preinit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000004))

<P><STRONG><a name="[222]"></a>__rt_lib_init_rand_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000E))

<P><STRONG><a name="[223]"></a>__rt_lib_init_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000033))

<P><STRONG><a name="[224]"></a>__rt_lib_init_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001D))

<P><STRONG><a name="[225]"></a>__rt_lib_init_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000025))

<P><STRONG><a name="[226]"></a>__rt_lib_init_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000C))

<P><STRONG><a name="[49]"></a>__rt_lib_shutdown</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown.o(.ARM.Collect$$libshutdown$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_ls
</UL>

<P><STRONG><a name="[227]"></a>__rt_lib_shutdown_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000002))

<P><STRONG><a name="[228]"></a>__rt_lib_shutdown_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000007))

<P><STRONG><a name="[229]"></a>__rt_lib_shutdown_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000F))

<P><STRONG><a name="[22a]"></a>__rt_lib_shutdown_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000010))

<P><STRONG><a name="[22b]"></a>__rt_lib_shutdown_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000A))

<P><STRONG><a name="[22c]"></a>__rt_lib_shutdown_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000004))

<P><STRONG><a name="[22d]"></a>__rt_lib_shutdown_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000C))

<P><STRONG><a name="[3e]"></a>__rt_entry</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry.o(.ARM.Collect$$rtentry$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_rt2
</UL>

<P><STRONG><a name="[22e]"></a>__rt_entry_presh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000002))

<P><STRONG><a name="[41]"></a>__rt_entry_sh</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry4.o(.ARM.Collect$$rtentry$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_entry_sh &rArr; __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[43]"></a>__rt_entry_li</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000A))
<BR><BR>[Calls]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init
</UL>

<P><STRONG><a name="[22f]"></a>__rt_entry_postsh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000009))

<P><STRONG><a name="[45]"></a>__rt_entry_main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 664 + Unknown Stack Size
<LI>Call Chain = __rt_entry_main &rArr; main &rArr; GetGsense &rArr; pow &rArr; __kernel_poly &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[230]"></a>__rt_entry_postli_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000C))

<P><STRONG><a name="[6c]"></a>__rt_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit.o(.ARM.Collect$$rtexit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[48]"></a>__rt_exit_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000003))
<BR><BR>[Calls]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown
</UL>

<P><STRONG><a name="[231]"></a>__rt_exit_prels_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000002))

<P><STRONG><a name="[4a]"></a>__rt_exit_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>

<P><STRONG><a name="[0]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_fm33lg0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_fm33lg0xx.o(RESET)
</UL>
<P><STRONG><a name="[1]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_fm33lg0xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_fm33lg0xx.o(RESET)
</UL>
<P><STRONG><a name="[2]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_fm33lg0xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_fm33lg0xx.o(RESET)
</UL>
<P><STRONG><a name="[3]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_fm33lg0xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_fm33lg0xx.o(RESET)
</UL>
<P><STRONG><a name="[4]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_fm33lg0xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_fm33lg0xx.o(RESET)
</UL>
<P><STRONG><a name="[5]"></a>SysTick_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_fm33lg0xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_fm33lg0xx.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>ADC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_fm33lg0xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_fm33lg0xx.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>AES_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_fm33lg0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_fm33lg0xx.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>ATIM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_fm33lg0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_fm33lg0xx.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>BSTIM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_fm33lg0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_fm33lg0xx.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>CAN_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_fm33lg0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_fm33lg0xx.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>CCL_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_fm33lg0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_fm33lg0xx.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>COMPx_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_fm33lg0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_fm33lg0xx.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>DAC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_fm33lg0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_fm33lg0xx.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>DMA_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_fm33lg0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_fm33lg0xx.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>FDET_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_fm33lg0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_fm33lg0xx.o(RESET)
</UL>
<P><STRONG><a name="[9]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_fm33lg0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_fm33lg0xx.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>GPTIM0_1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_fm33lg0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_fm33lg0xx.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>GPTIM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_fm33lg0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_fm33lg0xx.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>I2C_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_fm33lg0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_fm33lg0xx.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>LUT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_fm33lg0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_fm33lg0xx.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>SPI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_fm33lg0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_fm33lg0xx.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_fm33lg0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_fm33lg0xx.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_fm33lg0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_fm33lg0xx.o(RESET)
</UL>
<P><STRONG><a name="[7]"></a>SVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_fm33lg0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_fm33lg0xx.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>U7816_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_fm33lg0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_fm33lg0xx.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>UART0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_fm33lg0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_fm33lg0xx.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>UART1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_fm33lg0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_fm33lg0xx.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>UART3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_fm33lg0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_fm33lg0xx.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>UART4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_fm33lg0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_fm33lg0xx.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>UART5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_fm33lg0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_fm33lg0xx.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>VREF_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_fm33lg0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_fm33lg0xx.o(RESET)
</UL>
<P><STRONG><a name="[6]"></a>WDT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_fm33lg0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_fm33lg0xx.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>WKUPx_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_fm33lg0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_fm33lg0xx.o(RESET)
</UL>
<P><STRONG><a name="[6a]"></a>__user_initial_stackheap</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup_fm33lg0xx.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[1da]"></a>strstr</STRONG> (Thumb, 40 bytes, Stack size 12 bytes, strstr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = strstr
</UL>
<BR>[Called By]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Update_Lora
</UL>

<P><STRONG><a name="[7c]"></a>memcmp</STRONG> (Thumb, 90 bytes, Stack size 8 bytes, memcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigWirlessModule
</UL>

<P><STRONG><a name="[1c2]"></a>strcpy</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, strcpy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RestoreDevPara
</UL>

<P><STRONG><a name="[4d]"></a>_memset_w</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, rt_memclr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memclr_w
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset
</UL>

<P><STRONG><a name="[4c]"></a>_memset</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, rt_memclr.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset_w
</UL>
<BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[4e]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, rt_memclr.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetGsense
</UL>

<P><STRONG><a name="[51]"></a>__rt_memclr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memclr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
</UL>

<P><STRONG><a name="[232]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memclr.o(.text), UNUSED)

<P><STRONG><a name="[233]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memclr.o(.text), UNUSED)

<P><STRONG><a name="[4f]"></a>__rt_memclr_w</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, rt_memclr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset_w
</UL>

<P><STRONG><a name="[50]"></a>strncpy</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, strncpy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = strncpy
</UL>
<BR>[Calls]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSerialNo
</UL>

<P><STRONG><a name="[c5]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, aeabi_sdiv.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_EXTI_Init
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemPLLClockUpdate
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_DelayUsStart
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_DelayUs
</UL>

<P><STRONG><a name="[173]"></a>__aeabi_uidivmod</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, aeabi_sdiv.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UID_En_Decrypt
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUARTx_IRQHandler
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HexToBcd
</UL>

<P><STRONG><a name="[234]"></a>__aeabi_idiv</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, aeabi_sdiv.o(.text), UNUSED)

<P><STRONG><a name="[235]"></a>__aeabi_idivmod</STRONG> (Thumb, 338 bytes, Stack size 8 bytes, aeabi_sdiv.o(.text), UNUSED)

<P><STRONG><a name="[236]"></a>__use_two_region_memory</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[237]"></a>__rt_heap_escrow$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[238]"></a>__rt_heap_expand$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[14b]"></a>__aeabi_d2f</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, d2f.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = __aeabi_d2f
</UL>
<BR>[Called By]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetGsense
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDryrate0
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetBatVol
</UL>

<P><STRONG><a name="[239]"></a>_d2f</STRONG> (Thumb, 120 bytes, Stack size 12 bytes, d2f.o(.text), UNUSED)

<P><STRONG><a name="[149]"></a>__aeabi_dadd</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, daddsub.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetGsense
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDryrate0
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetBatVol
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan2
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
</UL>

<P><STRONG><a name="[52]"></a>_dadd</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, daddsub.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub1
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd1
</UL>

<P><STRONG><a name="[205]"></a>__aeabi_dsub</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, daddsub.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_dsub
</UL>
<BR>[Called By]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
</UL>

<P><STRONG><a name="[55]"></a>_dsub</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, daddsub.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub1
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd1
</UL>

<P><STRONG><a name="[206]"></a>__aeabi_drsub</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, daddsub.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_drsub
</UL>
<BR>[Called By]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
</UL>

<P><STRONG><a name="[56]"></a>_drsb</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, daddsub.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub1
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd1
</UL>

<P><STRONG><a name="[148]"></a>__aeabi_ddiv</STRONG> (Thumb, 0 bytes, Stack size 64 bytes, ddiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = __aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetBatVol
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_invalid
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_divzero
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
</UL>

<P><STRONG><a name="[58]"></a>_ddiv</STRONG> (Thumb, 1072 bytes, Stack size 64 bytes, ddiv.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drdiv
</UL>

<P><STRONG><a name="[57]"></a>_drdiv</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, ddiv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ddiv
</UL>

<P><STRONG><a name="[5a]"></a>__aeabi_i2d_normalise</STRONG> (Thumb, 66 bytes, Stack size 0 bytes, dflti.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
</UL>

<P><STRONG><a name="[59]"></a>__aeabi_i2d</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, dflti.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d_normalise
</UL>
<BR>[Called By]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetGsense
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetBatVol
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
</UL>

<P><STRONG><a name="[23a]"></a>_dflt</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, dflti.o(.text), UNUSED)

<P><STRONG><a name="[5b]"></a>__aeabi_ui2d</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dflti.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d_normalise
</UL>

<P><STRONG><a name="[23b]"></a>_dfltu</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, dflti.o(.text), UNUSED)

<P><STRONG><a name="[14a]"></a>__aeabi_dmul</STRONG> (Thumb, 0 bytes, Stack size 56 bytes, dmul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __aeabi_dmul
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetBatVol
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
</UL>

<P><STRONG><a name="[23c]"></a>_dmul</STRONG> (Thumb, 558 bytes, Stack size 56 bytes, dmul.o(.text), UNUSED)

<P><STRONG><a name="[151]"></a>__aeabi_f2d</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, f2d.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetGsense
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDryrate0
</UL>

<P><STRONG><a name="[23d]"></a>_f2d</STRONG> (Thumb, 80 bytes, Stack size 0 bytes, f2d.o(.text), UNUSED)

<P><STRONG><a name="[157]"></a>__aeabi_fdiv</STRONG> (Thumb, 0 bytes, Stack size 20 bytes, fdiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = __aeabi_fdiv
</UL>
<BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDryrate0
</UL>

<P><STRONG><a name="[5d]"></a>_fdiv</STRONG> (Thumb, 334 bytes, Stack size 20 bytes, fdiv.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_frdiv
</UL>

<P><STRONG><a name="[5c]"></a>_frdiv</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, fdiv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fdiv
</UL>

<P><STRONG><a name="[14c]"></a>__aeabi_f2iz</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, ffixi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_f2iz
</UL>
<BR>[Called By]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetGsense
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetBatVol
</UL>

<P><STRONG><a name="[23e]"></a>_ffix</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, ffixi.o(.text), UNUSED)

<P><STRONG><a name="[5f]"></a>__aeabi_i2f_normalise</STRONG> (Thumb, 72 bytes, Stack size 0 bytes, fflti.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
</UL>

<P><STRONG><a name="[5e]"></a>__aeabi_i2f</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, fflti.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f_normalise
</UL>
<BR>[Called By]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dsm_from_fs2g_to_mg
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dsm_from_1000dps_to_dps
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDryrate0
</UL>

<P><STRONG><a name="[23f]"></a>_fflt</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, fflti.o(.text), UNUSED)

<P><STRONG><a name="[60]"></a>__aeabi_ui2f</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, fflti.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f_normalise
</UL>

<P><STRONG><a name="[240]"></a>_ffltu</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, fflti.o(.text), UNUSED)

<P><STRONG><a name="[61]"></a>__read_errno</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, _rserrno.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>

<P><STRONG><a name="[63]"></a>__set_errno</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, _rserrno.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
</UL>

<P><STRONG><a name="[1fd]"></a>__ARM_scalbn</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, dscalbn.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __ARM_scalbn
</UL>
<BR>[Called By]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_overflow
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
</UL>

<P><STRONG><a name="[209]"></a>_dsqrt</STRONG> (Thumb, 248 bytes, Stack size 20 bytes, dsqrt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = _dsqrt
</UL>
<BR>[Called By]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt
</UL>

<P><STRONG><a name="[62]"></a>__aeabi_errno_addr</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_errno_addr_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__read_errno
</UL>

<P><STRONG><a name="[241]"></a>__errno$intlibspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_errno_addr_intlibspace.o(.text), UNUSED)

<P><STRONG><a name="[242]"></a>__rt_errno_addr$intlibspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_errno_addr_intlibspace.o(.text), UNUSED)

<P><STRONG><a name="[64]"></a>__fpl_dcmp_InfNaN</STRONG> (Thumb, 154 bytes, Stack size 24 bytes, dcmpin.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcheck_NaN2
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_cmpreturn
</UL>
<BR>[Called By]<UL><LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drcmple
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dcmple
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dcmpge
</UL>

<P><STRONG><a name="[67]"></a>__fpl_fcmp_InfNaN</STRONG> (Thumb, 96 bytes, Stack size 8 bytes, fcmpin.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fcheck_NaN2
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_cmpreturn
</UL>
<BR>[Called By]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fcmpge
</UL>

<P><STRONG><a name="[243]"></a>__user_libspace</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[69]"></a>__user_perproc_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[244]"></a>__user_perthread_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[42]"></a>__user_setup_stackheap</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, sys_stackheap_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_initial_stackheap
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perproc_libspace
</UL>
<BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_sh
</UL>

<P><STRONG><a name="[47]"></a>exit</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, exit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = exit
</UL>
<BR>[Calls]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_call_atexit_fns (Weak Reference)
</UL>
<BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[65]"></a>__fpl_cmpreturn</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, cmpret.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fcmp_InfNaN
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcmp_InfNaN
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_return_NaN
</UL>

<P><STRONG><a name="[66]"></a>__fpl_dcheck_NaN2</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, dnan2.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_return_NaN
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcmp_InfNaN
</UL>

<P><STRONG><a name="[68]"></a>__fpl_fcheck_NaN2</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, fnan2.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_return_NaN
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fcmp_InfNaN
</UL>

<P><STRONG><a name="[6d]"></a>__fpl_return_NaN</STRONG> (Thumb, 94 bytes, Stack size 8 bytes, retnan.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_cmpreturn
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fcheck_NaN2
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcheck_NaN2
</UL>

<P><STRONG><a name="[4b]"></a>_sys_exit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sys_exit.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_exit
</UL>

<P><STRONG><a name="[245]"></a>__I$use$semihosting</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[246]"></a>__use_no_semihosting_swi</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[6e]"></a>ADCDataProcess</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, getsensors.o(.text.ADCDataProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = ADCDataProcess &rArr; GetBatVol &rArr; __aeabi_ddiv
</UL>
<BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetRef
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetBatVol
</UL>
<BR>[Called By]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetVoltage
</UL>

<P><STRONG><a name="[247]"></a>__semihosting_library_function</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, indicate_semi.o(.text), UNUSED)

<P><STRONG><a name="[182]"></a>CRC_Modbus</STRONG> (Thumb, 144 bytes, Stack size 24 bytes, control.o(.text.CRC_Modbus))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = CRC_Modbus
</UL>
<BR>[Called By]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Update_Lora
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessPktUID
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoraRxPrce
</UL>

<P><STRONG><a name="[71]"></a>CloseTask</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, control.o(.text.CloseTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = CloseTask &rArr; ModeSet &rArr; FL_GPIO_SetOutputPin
</UL>
<BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModeSet
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlagStatusClear
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_RTCA_Disable
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_LPTIM32_Disable
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DevDeInit
</UL>

<P><STRONG><a name="[76]"></a>ConfigWirlessModule</STRONG> (Thumb, 208 bytes, Stack size 48 bytes, lora.o(.text.ConfigWirlessModule))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = ConfigWirlessModule &rArr; TransmitData &rArr; HAL_UART_Transmit &rArr; FL_DelayMsStart &rArr; FL_DelayUsStart
</UL>
<BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModeSet
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlagStatusIs
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlagStatusClear
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_DelayMs
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TransmitData
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_GPIO_SetOutputPin
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_DelayMsStart
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_DelayEnd
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessPktUID
</UL>

<P><STRONG><a name="[7e]"></a>DeInitPeripheral</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, control.o(.text.DeInitPeripheral))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = DeInitPeripheral &rArr; FL_LPUART_DeInit &rArr; FL_RMU_EnableResetAPBPeripheral
</UL>
<BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_SPI_DeInit
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_RTCA_DeInit
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_LPUART_DeInit
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_ADC_DeInit
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DevDeInit
</UL>

<P><STRONG><a name="[83]"></a>DevDeInit</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, control.o(.text.DevDeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = DevDeInit &rArr; lsm6dsmDeInit &rArr; lsm6dsm_xl_data_rate_set &rArr; lsm6dsm_read_reg &rArr; SPIx_ReadWriteByte &rArr; FL_DelayMsStart &rArr; FL_DelayUsStart
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dsmDeInit
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeInitPeripheral
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CloseTask
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[85]"></a>DevInit</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, control.o(.text.DevInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = DevInit &rArr; lsm6dsmHiInit &rArr; lsm6dsm_pin_int2_route_set &rArr; lsm6dsm_read_reg &rArr; SPIx_ReadWriteByte &rArr; FL_DelayMsStart &rArr; FL_DelayUsStart
</UL>
<BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dsm_device_id_get
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dsmHiInit
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_DelayMs
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpenTask
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KalmanInit
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnPeripheral
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_GPIO_ResetOutputPin
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[8c]"></a>DisablePeripheral</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, control.o(.text.DisablePeripheral))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = DisablePeripheral &rArr; FL_LPUART_DeInit &rArr; FL_RMU_EnableResetAPBPeripheral
</UL>
<BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModeSet
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_LPUART_DeInit
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_SPI_Disable
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_LPUART_DisableTX
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_LPUART_DisableRX
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_LPTIM32_Disable
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_ADC_Disable
</UL>
<BR>[Called By]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysSleep
</UL>

<P><STRONG><a name="[174]"></a>DryXKalParaInit</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, kalman.o(.text.DryXKalParaInit))
<BR><BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KalmanInit
</UL>

<P><STRONG><a name="[175]"></a>DryYKalParaInit</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, kalman.o(.text.DryYKalParaInit))
<BR><BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KalmanInit
</UL>

<P><STRONG><a name="[176]"></a>DryZKalParaInit</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, kalman.o(.text.DryZKalParaInit))
<BR><BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KalmanInit
</UL>

<P><STRONG><a name="[86]"></a>EnPeripheral</STRONG> (Thumb, 128 bytes, Stack size 24 bytes, control.o(.text.EnPeripheral))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = EnPeripheral &rArr; GetRFChan &rArr; HAL_UART_Transmit &rArr; FL_DelayMsStart &rArr; FL_DelayUsStart
</UL>
<BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModeSet
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_DelayMs
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetRFChan
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_SPI_Enable
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_LPUART_EnableTX
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_LPUART_EnableRX
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_LPUART_ClearFlag_RXBuffOverflow
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_LPUART_ClearFlag_RXBuffFull
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_LPUART_ClearFlag_FrameError
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_LPTIM32_Enable
</UL>
<BR>[Called By]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysSleep
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DevInit
</UL>

<P><STRONG><a name="[99]"></a>FL_ADC_CommonInit</STRONG> (Thumb, 520 bytes, Stack size 48 bytes, fm33lg0xx_fl_adc.o(.text.FL_ADC_CommonInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = FL_ADC_CommonInit &rArr; FL_ADC_SetReferenceSource
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_CMU_SetADCPrescaler
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_CMU_SetADCClockSource
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_CMU_EnableGroup3OperationClock
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_CMU_EnableGroup2BusClock
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_ADC_SetReferenceSource
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_ADC_SetClockSource
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_ADC_SetBitWidth
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_ADC_SetAPBPrescaler
</UL>
<BR>[Called By]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MF_ADC_Common_Init
</UL>

<P><STRONG><a name="[81]"></a>FL_ADC_DeInit</STRONG> (Thumb, 88 bytes, Stack size 32 bytes, fm33lg0xx_fl_adc.o(.text.FL_ADC_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = FL_ADC_DeInit &rArr; FL_RMU_EnableResetAPBPeripheral
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_RMU_EnableResetAPBPeripheral
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_RMU_EnablePeripheralReset
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_RMU_DisableResetAPBPeripheral
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_RMU_DisablePeripheralReset
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeInitPeripheral
</UL>

<P><STRONG><a name="[a6]"></a>FL_ADC_Init</STRONG> (Thumb, 1012 bytes, Stack size 64 bytes, fm33lg0xx_fl_adc.o(.text.FL_ADC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = FL_ADC_Init &rArr; FL_ADC_SetTriggerSource
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_VREF_IsEnabled
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_VREF_IsActiveFlag_Ready
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_VREF_EnableTemperatureSensor
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_VREF_Enable
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_VREF_ClearFlag_Ready
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_CMU_EnableGroup1BusClock
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_ADC_SetTriggerSource
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_ADC_SetTriggerEdge
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_ADC_SetSlowChannelSamplingTime
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_ADC_SetSingleConversionAutoMode
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_ADC_SetSequenceScanDirection
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_ADC_SetOverSamplingShift
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_ADC_SetOverSamplingMultiplier
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_ADC_SetFastChannelSamplingTime
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_ADC_SetConversionMode
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_ADC_IsEnabled
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_ADC_IsActiveFlag_EndOfCalibration
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_ADC_EnableWaitMode
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_ADC_EnableOverrunMode
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_ADC_EnableOverSampling
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_ADC_EnableCalibration
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_ADC_Enable
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_ADC_DisableWaitMode
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_ADC_DisableOverrunMode
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_ADC_DisableOverSampling
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_ADC_DisableExternalConversion
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_ADC_Disable
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_ADC_ClearFlag_EndOfCalibration
</UL>
<BR>[Called By]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MF_ADC_Sampling_Init
</UL>

<P><STRONG><a name="[7a]"></a>FL_DelayEnd</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, fm33lg0xx_fl.o(.text.FL_DelayEnd))
<BR><BR>[Called By]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIx_ReadWriteByte
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Update_Lora
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigWirlessModule
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetRFChan
</UL>

<P><STRONG><a name="[dd]"></a>FL_DelayInit</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, fm33lg0xx_fl.o(.text.FL_DelayInit))
<BR><BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_Init
</UL>

<P><STRONG><a name="[77]"></a>FL_DelayMs</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, fm33lg0xx_fl.o(.text.FL_DelayMs))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = FL_DelayMs &rArr; FL_DelayUs
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_DelayUs
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dsmHiInit
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dsmDeInit
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dsmActInit
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UID_ReadFlash
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StoreData
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadDevPara
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDryrate0
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DevInit
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MF_Clock_Init
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UIDProcess
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigWirlessModule
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetRef
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UID_WriteFlash
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnPeripheral
</UL>

<P><STRONG><a name="[79]"></a>FL_DelayMsStart</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, fm33lg0xx_fl.o(.text.FL_DelayMsStart))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = FL_DelayMsStart &rArr; FL_DelayUsStart
</UL>
<BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_DelayUsStart
</UL>
<BR>[Called By]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIx_ReadWriteByte
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Update_Lora
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigWirlessModule
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetRFChan
</UL>

<P><STRONG><a name="[c3]"></a>FL_DelayUs</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, fm33lg0xx_fl.o(.text.FL_DelayUs))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = FL_DelayUs
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidiv
</UL>
<BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_DelayMs
</UL>

<P><STRONG><a name="[c4]"></a>FL_DelayUsStart</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, fm33lg0xx_fl.o(.text.FL_DelayUsStart))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = FL_DelayUsStart
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidiv
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_DelayMsStart
</UL>

<P><STRONG><a name="[c6]"></a>FL_EXTI_CommonInit</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, fm33lg0xx_fl_exti.o(.text.FL_EXTI_CommonInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = FL_EXTI_CommonInit &rArr; FL_CMU_SetEXTIClockSource
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_CMU_SetEXTIClockSource
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_CMU_EnableGroup3OperationClock
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_CMU_EnableGroup1BusClock
</UL>
<BR>[Called By]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MF_EXTI_Common_Init
</UL>

<P><STRONG><a name="[ca]"></a>FL_EXTI_Init</STRONG> (Thumb, 640 bytes, Stack size 48 bytes, fm33lg0xx_fl_exti.o(.text.FL_EXTI_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = FL_EXTI_Init &rArr; FL_GPIO_EnableDigitalFilter
</UL>
<BR>[Calls]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_ClearPendingIRQ
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_GPIO_EnableDigitalFilter
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_GPIO_DisableDigitalFilter
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_GPIO_ClearFlag_EXTI
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidiv
</UL>
<BR>[Called By]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MF_EXTI_Line3_Init
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MF_EXTI_Line2_Init
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MF_EXTI_Line1_Init
</UL>

<P><STRONG><a name="[cf]"></a>FL_GPIO_Init</STRONG> (Thumb, 636 bytes, Stack size 48 bytes, fm33lg0xx_fl_gpio.o(.text.FL_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = FL_GPIO_Init &rArr; FL_GPIO_SetPinMode
</UL>
<BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_GPIO_SetPinMode
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_GPIO_EnablePinRemap
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_GPIO_EnablePinPullup
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_GPIO_EnablePinOpenDrain
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_GPIO_EnablePinInput
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_GPIO_EnablePinAnalogSwitch
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_GPIO_DisablePinRemap
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_GPIO_DisablePinPullup
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_GPIO_DisablePinOpenDrain
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_GPIO_DisablePinInput
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_GPIO_DisablePinAnalogSwitch
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_CMU_EnableGroup1BusClock
</UL>
<BR>[Called By]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MF_SWD_IO_Init
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MF_SPI2_Init
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MF_SPI0_Init
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MF_LPUART2_Init
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MF_LPUART0_Init
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MF_GPIO_Init
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MF_EXTI_Line3_Init
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MF_EXTI_Line2_Init
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MF_EXTI_Line1_Init
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MF_ADC_Sampling_Init
</UL>

<P><STRONG><a name="[dc]"></a>FL_Init</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, fm33lg0xx_fl.o(.text.FL_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = FL_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_DelayInit
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[de]"></a>FL_LPTIM32_Init</STRONG> (Thumb, 744 bytes, Stack size 48 bytes, fm33lg0xx_fl_lptim32.o(.text.FL_LPTIM32_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = FL_LPTIM32_Init &rArr; FL_LPTIM32_WriteAutoReload
</UL>
<BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_LPTIM32_WriteAutoReload
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_LPTIM32_SetPrescaler
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_LPTIM32_SetOperationMode
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_LPTIM32_SetOnePulseMode
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_LPTIM32_SetETRTriggerEdge
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_LPTIM32_SetETRCountEdge
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_LPTIM32_SetClockSource
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_LPTIM32_EnableETRFilter
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_CMU_SetLPTIM32ClockSource
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_CMU_EnableGroup3OperationClock
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_CMU_EnableGroup1BusClock
</UL>
<BR>[Called By]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MF_LPTIM32_TimerBase_Init
</UL>

<P><STRONG><a name="[7f]"></a>FL_LPUART_DeInit</STRONG> (Thumb, 256 bytes, Stack size 56 bytes, fm33lg0xx_fl_lpuart.o(.text.FL_LPUART_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = FL_LPUART_DeInit &rArr; FL_RMU_EnableResetAPBPeripheral
</UL>
<BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_RMU_EnableResetAPBPeripheral
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_RMU_EnablePeripheralReset
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_RMU_DisableResetAPBPeripheral
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_RMU_DisablePeripheralReset
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_CMU_IsEnabledGroup3BusClock
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_CMU_DisableGroup3OperationClock
</UL>
<BR>[Called By]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UIDProcess
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisablePeripheral
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeInitPeripheral
</UL>

<P><STRONG><a name="[f0]"></a>FL_LPUART_Init</STRONG> (Thumb, 880 bytes, Stack size 72 bytes, fm33lg0xx_fl_lpuart.o(.text.FL_LPUART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = FL_LPUART_Init &rArr; FL_LPUART_WriteBitModulation
</UL>
<BR>[Calls]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_LPUART_WriteBitModulation
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_LPUART_SetStopBitsWidth
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_LPUART_SetParity
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_LPUART_SetDataWidth
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_LPUART_SetBaudRate
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_LPUART_IsEnabledTX
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_LPUART_IsEnabledRX
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_LPUART_EnableTX
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_LPUART_EnableRX
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_LPUART_EnableBaudRateModulation
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_LPUART_DisableBaudRateModulation
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_CMU_SetLPUART2ClockSource
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_CMU_SetLPUART1ClockSource
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_CMU_SetLPUART0ClockSource
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_CMU_RCLF_SetPrescaler
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_CMU_RCLF_Enable
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_CMU_EnableGroup3OperationClock
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_CMU_EnableGroup3BusClock
</UL>
<BR>[Called By]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MF_LPUART2_Init
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MF_LPUART0_Init
</UL>

<P><STRONG><a name="[103]"></a>FL_NVIC_Init</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, fm33lg0xx_fl.o(.text.FL_NVIC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = FL_NVIC_Init &rArr; NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPriority
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EnableIRQ
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_DisableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MF_NVIC_Init
</UL>

<P><STRONG><a name="[107]"></a>FL_PMU_Sleep_Init</STRONG> (Thumb, 396 bytes, Stack size 40 bytes, fm33lg0xx_fl_pmu.o(.text.FL_PMU_Sleep_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = FL_PMU_Sleep_Init &rArr; FL_PMU_SetWakeupDelay
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_PMU_SetWakeupDelay
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_PMU_SetSleepMode
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_PMU_SetRCHFWakeupFrequency
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_PMU_SetLDOLowPowerMode
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_PMU_EnableCoreVoltageScaling
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_PMU_DisableCoreVoltageScaling
</UL>
<BR>[Called By]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MF_PMU_Init
</UL>

<P><STRONG><a name="[10e]"></a>FL_RTCA_ConfigTime</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, fm33lg0xx_fl_rtca.o(.text.FL_RTCA_ConfigTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = FL_RTCA_ConfigTime &rArr; FL_RTCA_WriteYear
</UL>
<BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_RTCA_WriteYear
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_RTCA_WriteWeek
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_RTCA_WriteSecond
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_RTCA_WriteMonth
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_RTCA_WriteMinute
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_RTCA_WriteHour
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_RTCA_WriteEnable
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_RTCA_WriteDisable
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_RTCA_WriteDay
</UL>
<BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_RTCA_Init
</UL>

<P><STRONG><a name="[82]"></a>FL_RTCA_DeInit</STRONG> (Thumb, 104 bytes, Stack size 8 bytes, fm33lg0xx_fl_rtca.o(.text.FL_RTCA_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = FL_RTCA_DeInit
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeInitPeripheral
</UL>

<P><STRONG><a name="[118]"></a>FL_RTCA_Init</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, fm33lg0xx_fl_rtca.o(.text.FL_RTCA_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = FL_RTCA_Init &rArr; FL_RTCA_ConfigTime &rArr; FL_RTCA_WriteYear
</UL>
<BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_CMU_EnableGroup1BusClock
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_RTCA_ConfigTime
</UL>
<BR>[Called By]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MF_RTCA_Init
</UL>

<P><STRONG><a name="[80]"></a>FL_SPI_DeInit</STRONG> (Thumb, 228 bytes, Stack size 48 bytes, fm33lg0xx_fl_spi.o(.text.FL_SPI_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = FL_SPI_DeInit &rArr; FL_RMU_EnableResetAPBPeripheral
</UL>
<BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_RMU_EnableResetAPBPeripheral
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_RMU_EnablePeripheralReset
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_RMU_DisableResetAPBPeripheral
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_RMU_DisablePeripheralReset
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_CMU_DisableGroup3BusClock
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeInitPeripheral
</UL>

<P><STRONG><a name="[11f]"></a>FL_SPI_Init</STRONG> (Thumb, 652 bytes, Stack size 48 bytes, fm33lg0xx_fl_spi.o(.text.FL_SPI_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = FL_SPI_Init &rArr; FL_SPI_SetWorkMode
</UL>
<BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_SPI_SetWorkMode
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_SPI_SetTransferMode
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_SPI_SetDataWidth
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_SPI_SetClockPolarity
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_SPI_SetClockPhase
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_SPI_SetClockDivision
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_SPI_SetBitOrder
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_SPI_EnableSSNSoftControl
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_SPI_Enable
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_SPI_DisableSSNSoftControl
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_CMU_EnableGroup3BusClock
</UL>
<BR>[Called By]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MF_SPI2_Init
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MF_SPI0_Init
</UL>

<P><STRONG><a name="[12b]"></a>FL_VAO_XTLF_Init</STRONG> (Thumb, 440 bytes, Stack size 32 bytes, fm33lg0xx_fl_vao.o(.text.FL_VAO_XTLF_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = FL_VAO_XTLF_Init &rArr; FL_VAO_XTLF_SetWorkCurrent
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_VAO_XTLF_SetWorkCurrent
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_VAO_XTLF_SetDriveLevel
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_CDIF_EnableVAOToCPU
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_CDIF_EnableCPUToVAO
</UL>
<BR>[Called By]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MF_CMU_XTLF_Init
</UL>

<P><STRONG><a name="[72]"></a>FlagStatusClear</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, control.o(.text.FlagStatusClear))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = FlagStatusClear
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Update_Lora
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StoreData
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessPktUID
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoraRxPrce
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetVoltage
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetGsense
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDryrate0
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UIDProcess
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigWirlessModule
<LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPTIM_IRQHandler
<LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_IRQHandler
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CloseTask
</UL>

<P><STRONG><a name="[7b]"></a>FlagStatusIs</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, control.o(.text.FlagStatusIs))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = FlagStatusIs
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Update_Lora
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysSleep
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StoreData
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessPktUID
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoraRxPrce
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetVoltage
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetGsense
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDryrate0
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigWirlessModule
<LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPTIM_IRQHandler
<LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_IRQHandler
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetRFChan
</UL>

<P><STRONG><a name="[140]"></a>FlagStatusSet</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, control.o(.text.FlagStatusSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = FlagStatusSet
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dsmHiInit
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dsmActInit
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetGsense
<LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_IRQHandler
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUARTx_IRQHandler
<LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPTIM_IRQHandler
<LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_IRQHandler
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSerialNo
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpenTask
</UL>

<P><STRONG><a name="[130]"></a>GD25Q16_Read</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, gd25q_driver.o(.text.GD25Q16_Read))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = GD25Q16_Read &rArr; SPI_Flash_Read &rArr; SPIx_ReadWriteByte &rArr; FL_DelayMsStart &rArr; FL_DelayUsStart
</UL>
<BR>[Calls]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Flash_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UID_ReadFlash
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadDevPara
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GD25QXX_Write
</UL>

<P><STRONG><a name="[132]"></a>GD25QXX_Erase_Sector</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, gd25q_driver.o(.text.GD25QXX_Erase_Sector))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = GD25QXX_Erase_Sector &rArr; SPI_Flash_Wait_Busy &rArr; SPI_Flash_ReadSR &rArr; SPIx_ReadWriteByte &rArr; FL_DelayMsStart &rArr; FL_DelayUsStart
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIx_ReadWriteByte
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cs
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cd
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Flash_Wait_Busy
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_Write_Enable
</UL>
<BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GD25QXX_Write
</UL>

<P><STRONG><a name="[138]"></a>GD25QXX_Write</STRONG> (Thumb, 324 bytes, Stack size 40 bytes, gd25q_driver.o(.text.GD25QXX_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = GD25QXX_Write &rArr; GD25QXX_Write_NoCheck &rArr; SPI_Flash_Write_Page &rArr; SPI_Flash_Wait_Busy &rArr; SPI_Flash_ReadSR &rArr; SPIx_ReadWriteByte &rArr; FL_DelayMsStart &rArr; FL_DelayUsStart
</UL>
<BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GD25QXX_Write_NoCheck
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GD25QXX_Erase_Sector
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GD25Q16_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UID_WriteFlash
</UL>

<P><STRONG><a name="[139]"></a>GD25QXX_Write_NoCheck</STRONG> (Thumb, 142 bytes, Stack size 32 bytes, gd25q_driver.o(.text.GD25QXX_Write_NoCheck))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = GD25QXX_Write_NoCheck &rArr; SPI_Flash_Write_Page &rArr; SPI_Flash_Wait_Busy &rArr; SPI_Flash_ReadSR &rArr; SPIx_ReadWriteByte &rArr; FL_DelayMsStart &rArr; FL_DelayUsStart
</UL>
<BR>[Calls]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Flash_Write_Page
</UL>
<BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GD25QXX_Write
</UL>

<P><STRONG><a name="[13b]"></a>GD25_Sleep</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, gd25q_driver.o(.text.GD25_Sleep))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = GD25_Sleep &rArr; SPIx_ReadWriteByte &rArr; FL_DelayMsStart &rArr; FL_DelayUsStart
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIx_ReadWriteByte
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cs
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cd
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StoreData
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UIDProcess
</UL>

<P><STRONG><a name="[13c]"></a>GD25_Wakeup</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, gd25q_driver.o(.text.GD25_Wakeup))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = GD25_Wakeup &rArr; SPIx_ReadWriteByte &rArr; FL_DelayMsStart &rArr; FL_DelayUsStart
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIx_ReadWriteByte
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cs
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cd
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StoreData
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UIDProcess
</UL>

<P><STRONG><a name="[24]"></a>GPIO_IRQHandler</STRONG> (Thumb, 480 bytes, Stack size 32 bytes, interrupt.o(.text.GPIO_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = GPIO_IRQHandler &rArr; MF_LPUART0_Init &rArr; FL_LPUART_Init &rArr; FL_LPUART_WriteBitModulation
</UL>
<BR>[Calls]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlagStatusSet
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlagStatusIs
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlagStatusClear
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MF_LPUART0_Interrupt_Init
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MF_LPUART0_Init
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_LPTIM32_Enable
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_GPIO_SetOutputPin
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_GPIO_ResetOutputPin
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_GPIO_IsActiveFlag_EXTI
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_GPIO_GetInputPin
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_GPIO_ClearFlag_EXTI
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_fm33lg0xx.o(RESET)
</UL>
<P><STRONG><a name="[146]"></a>GetAcc</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, imu.o(.text.GetAcc))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = GetAcc &rArr; lsm6dsm_acceleration_raw_get &rArr; lsm6dsm_read_reg &rArr; SPIx_ReadWriteByte &rArr; FL_DelayMsStart &rArr; FL_DelayUsStart
</UL>
<BR>[Calls]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dsm_acceleration_raw_get
</UL>
<BR>[Called By]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetGsense
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDryrate0
</UL>

<P><STRONG><a name="[70]"></a>GetBatVol</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, getsensors.o(.text.GetBatVol))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = GetBatVol &rArr; __aeabi_ddiv
</UL>
<BR>[Calls]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HexToBcd
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2iz
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADCDataProcess
</UL>

<P><STRONG><a name="[14e]"></a>GetDryrate0</STRONG> (Thumb, 1272 bytes, Stack size 224 bytes, imu.o(.text.GetDryrate0))
<BR><BR>[Stack]<UL><LI>Max Depth = 448<LI>Call Chain = GetDryrate0 &rArr; lsm6dsmHiInit &rArr; lsm6dsm_pin_int2_route_set &rArr; lsm6dsm_read_reg &rArr; SPIx_ReadWriteByte &rArr; FL_DelayMsStart &rArr; FL_DelayUsStart
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dsm_from_fs2g_to_mg
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dsm_from_1000dps_to_dps
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dsmHiInit
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dsmActInit
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetGry
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetAcc
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_GPIO_SetOutputPin
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_GPIO_ResetOutputPin
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlagStatusIs
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlagStatusClear
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_DelayMs
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fcmpge
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dcmpge
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[14f]"></a>GetGry</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, imu.o(.text.GetGry))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = GetGry &rArr; lsm6dsm_angular_rate_raw_get &rArr; lsm6dsm_read_reg &rArr; SPIx_ReadWriteByte &rArr; FL_DelayMsStart &rArr; FL_DelayUsStart
</UL>
<BR>[Calls]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dsm_angular_rate_raw_get
</UL>
<BR>[Called By]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetGsense
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDryrate0
</UL>

<P><STRONG><a name="[15e]"></a>GetGsense</STRONG> (Thumb, 580 bytes, Stack size 376 bytes, imu.o(.text.GetGsense))
<BR><BR>[Stack]<UL><LI>Max Depth = 576<LI>Call Chain = GetGsense &rArr; pow &rArr; __kernel_poly &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dsm_from_1000dps_to_dps
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dsm_all_sources_get
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetGry
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetAcc
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_GPIO_ToggleOutputPin
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_GPIO_ResetOutputPin
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlagStatusSet
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlagStatusIs
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlagStatusClear
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2iz
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dcmplt
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[98]"></a>GetRFChan</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, lora.o(.text.GetRFChan))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = GetRFChan &rArr; HAL_UART_Transmit &rArr; FL_DelayMsStart &rArr; FL_DelayUsStart
</UL>
<BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlagStatusIs
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_DelayMsStart
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_DelayEnd
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnPeripheral
</UL>

<P><STRONG><a name="[6f]"></a>GetRef</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, getsensors.o(.text.GetRef))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = GetRef &rArr; GetSingleChannelSample_POLL &rArr; FL_ADC_EnableSequencerChannel
</UL>
<BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_DelayMs
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSingleChannelSample_POLL
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_GPIO_SetOutputPin
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_GPIO_ResetOutputPin
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADCDataProcess
</UL>

<P><STRONG><a name="[170]"></a>GetVoltage</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, getsensors.o(.text.GetVoltage))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = GetVoltage &rArr; ADCDataProcess &rArr; GetBatVol &rArr; __aeabi_ddiv
</UL>
<BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlagStatusIs
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlagStatusClear
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADCDataProcess
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[163]"></a>HAL_UART_Transmit</STRONG> (Thumb, 136 bytes, Stack size 32 bytes, user_uart.o(.text.HAL_UART_Transmit))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = HAL_UART_Transmit &rArr; FL_DelayMsStart &rArr; FL_DelayUsStart
</UL>
<BR>[Calls]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_LPUART_WriteTXBuff
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_LPUART_IsActiveFlag_TXBuffEmpty
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_DelayMsStart
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_DelayEnd
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TransmitData
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetRFChan
</UL>

<P><STRONG><a name="[14d]"></a>HexToBcd</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, control.o(.text.HexToBcd))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HexToBcd
</UL>
<BR>[Calls]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetBatVol
</UL>

<P><STRONG><a name="[8b]"></a>KalmanInit</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, kalman.o(.text.KalmanInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = KalmanInit
</UL>
<BR>[Calls]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DryZKalParaInit
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DryYKalParaInit
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DryXKalParaInit
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DevInit
</UL>

<P><STRONG><a name="[1a]"></a>LPTIM_IRQHandler</STRONG> (Thumb, 364 bytes, Stack size 24 bytes, interrupt.o(.text.LPTIM_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = LPTIM_IRQHandler &rArr; FlagStatusSet
</UL>
<BR>[Calls]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlagStatusSet
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlagStatusIs
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlagStatusClear
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_LPTIM32_IsEnabledIT_Update
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_LPTIM32_IsActiveFlag_Update
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_LPTIM32_ClearFlag_Update
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_GPIO_SetOutputPin
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_GPIO_ResetOutputPin
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_fm33lg0xx.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>LPUARTx_IRQHandler</STRONG> (Thumb, 260 bytes, Stack size 48 bytes, interrupt.o(.text.LPUARTx_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = LPUARTx_IRQHandler &rArr; FlagStatusSet
</UL>
<BR>[Calls]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlagStatusSet
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_LPUART_ReadRXBuff
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_LPUART_IsEnabledIT_RXBuffFull
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_LPUART_IsActiveFlag_RXBuffFull
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_LPUART_ClearFlag_RXWakeup
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_LPUART_ClearFlag_RXBuffOverflow
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_LPUART_ClearFlag_RXBuffFull
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_LPUART_ClearFlag_FrameError
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_LPTIM32_Enable
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_fm33lg0xx.o(RESET)
</UL>
<P><STRONG><a name="[181]"></a>LoraRxPrce</STRONG> (Thumb, 136 bytes, Stack size 32 bytes, lora.o(.text.LoraRxPrce))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = LoraRxPrce &rArr; OpenTask &rArr; ModeSet &rArr; FL_GPIO_SetOutputPin
</UL>
<BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlagStatusIs
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlagStatusClear
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpenTask
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRC_Modbus
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[183]"></a>MF_ADC_Common_Init</STRONG> (Thumb, 26 bytes, Stack size 24 bytes, mf_config.o(.text.MF_ADC_Common_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = MF_ADC_Common_Init &rArr; FL_ADC_CommonInit &rArr; FL_ADC_SetReferenceSource
</UL>
<BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_ADC_CommonInit
</UL>
<BR>[Called By]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MF_Config_Init
</UL>

<P><STRONG><a name="[184]"></a>MF_ADC_Sampling_Init</STRONG> (Thumb, 100 bytes, Stack size 96 bytes, mf_config.o(.text.MF_ADC_Sampling_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = MF_ADC_Sampling_Init &rArr; FL_ADC_Init &rArr; FL_ADC_SetTriggerSource
</UL>
<BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_GPIO_Init
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_ADC_Init
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_ADC_EnableSequencerChannel
</UL>
<BR>[Called By]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MF_Config_Init
</UL>

<P><STRONG><a name="[186]"></a>MF_CMU_XTLF_Init</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, mf_config.o(.text.MF_CMU_XTLF_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = MF_CMU_XTLF_Init &rArr; FL_VAO_XTLF_Init &rArr; FL_VAO_XTLF_SetWorkCurrent
</UL>
<BR>[Calls]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_VAO_XTLF_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MF_Clock_Init
</UL>

<P><STRONG><a name="[187]"></a>MF_Clock_Init</STRONG> (Thumb, 176 bytes, Stack size 40 bytes, mf_config.o(.text.MF_Clock_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = MF_Clock_Init &rArr; MF_CMU_XTLF_Init &rArr; FL_VAO_XTLF_Init &rArr; FL_VAO_XTLF_SetWorkCurrent
</UL>
<BR>[Calls]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MF_CMU_XTLF_Init
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_DelayMs
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_VAO_XTLF_Enable
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_RTCB_WriteAdjustValue
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_RTCA_WriteAdjustValue
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_FLASH_SetReadWait
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_CMU_SetSystemClockSource
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_CMU_SetLSCLKClockSource
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_CMU_SetAPBPrescaler
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_CMU_SetAHBPrescaler
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_CMU_RCHF_WriteTrimValue
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_CMU_RCHF_SetFrequency
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_CMU_RCHF_Enable
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_CMU_EnableLSCLKAutoSwitch
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_CMU_EnableGroup1BusClock
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_CMU_DisableGroup1BusClock
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_CDIF_SetPrescaler
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_CDIF_EnableVAOToCPU
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_CDIF_EnableCPUToVAO
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[19a]"></a>MF_Config_Init</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, mf_config.o(.text.MF_Config_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = MF_Config_Init &rArr; MF_ADC_Sampling_Init &rArr; FL_ADC_Init &rArr; FL_ADC_SetTriggerSource
</UL>
<BR>[Calls]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MF_SWD_IO_Init
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MF_SPI2_Init
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MF_SPI0_Init
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MF_RTCA_Interrupt_Init
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MF_RTCA_Init
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MF_PMU_Init
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MF_NVIC_Init
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MF_LPUART2_Interrupt_Init
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MF_LPUART2_Init
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MF_LPUART0_Interrupt_Init
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MF_LPUART0_Init
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MF_LPTIM32_TimerBase_Init
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MF_LPTIM32_Interrupt_Init
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MF_GPIO_Init
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MF_EXTI_Line3_Init
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MF_EXTI_Line2_Init
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MF_EXTI_Line1_Init
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MF_EXTI_Common_Init
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MF_ADC_Sampling_Init
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MF_ADC_Common_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[19d]"></a>MF_EXTI_Common_Init</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, mf_config.o(.text.MF_EXTI_Common_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = MF_EXTI_Common_Init &rArr; FL_EXTI_CommonInit &rArr; FL_CMU_SetEXTIClockSource
</UL>
<BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_EXTI_CommonInit
</UL>
<BR>[Called By]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MF_PowerUp_Config_Init
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MF_Config_Init
</UL>

<P><STRONG><a name="[19e]"></a>MF_EXTI_Line1_Init</STRONG> (Thumb, 52 bytes, Stack size 48 bytes, mf_config.o(.text.MF_EXTI_Line1_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = MF_EXTI_Line1_Init &rArr; FL_GPIO_Init &rArr; FL_GPIO_SetPinMode
</UL>
<BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_GPIO_Init
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_EXTI_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MF_Config_Init
</UL>

<P><STRONG><a name="[19f]"></a>MF_EXTI_Line2_Init</STRONG> (Thumb, 52 bytes, Stack size 48 bytes, mf_config.o(.text.MF_EXTI_Line2_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = MF_EXTI_Line2_Init &rArr; FL_GPIO_Init &rArr; FL_GPIO_SetPinMode
</UL>
<BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_GPIO_Init
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_EXTI_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MF_Config_Init
</UL>

<P><STRONG><a name="[1a0]"></a>MF_EXTI_Line3_Init</STRONG> (Thumb, 56 bytes, Stack size 48 bytes, mf_config.o(.text.MF_EXTI_Line3_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = MF_EXTI_Line3_Init &rArr; FL_GPIO_Init &rArr; FL_GPIO_SetPinMode
</UL>
<BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_GPIO_Init
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_EXTI_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MF_PowerUp_Config_Init
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MF_Config_Init
</UL>

<P><STRONG><a name="[19b]"></a>MF_GPIO_Init</STRONG> (Thumb, 184 bytes, Stack size 56 bytes, mf_config.o(.text.MF_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = MF_GPIO_Init &rArr; FL_GPIO_Init &rArr; FL_GPIO_SetPinMode
</UL>
<BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_GPIO_Init
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_GPIO_SetOutputPin
</UL>
<BR>[Called By]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MF_PowerUp_Config_Init
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MF_Config_Init
</UL>

<P><STRONG><a name="[1a2]"></a>MF_LPTIM32_Interrupt_Init</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, mf_config.o(.text.MF_LPTIM32_Interrupt_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = MF_LPTIM32_Interrupt_Init &rArr; FL_LPTIM32_EnableIT_Update
</UL>
<BR>[Calls]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_LPTIM32_EnableIT_Update
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_LPTIM32_ClearFlag_Update
</UL>
<BR>[Called By]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MF_PowerUp_Config_Init
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MF_Config_Init
</UL>

<P><STRONG><a name="[1a1]"></a>MF_LPTIM32_TimerBase_Init</STRONG> (Thumb, 40 bytes, Stack size 40 bytes, mf_config.o(.text.MF_LPTIM32_TimerBase_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = MF_LPTIM32_TimerBase_Init &rArr; FL_LPTIM32_Init &rArr; FL_LPTIM32_WriteAutoReload
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_LPTIM32_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MF_PowerUp_Config_Init
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MF_Config_Init
</UL>

<P><STRONG><a name="[143]"></a>MF_LPUART0_Init</STRONG> (Thumb, 96 bytes, Stack size 80 bytes, mf_config.o(.text.MF_LPUART0_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = MF_LPUART0_Init &rArr; FL_LPUART_Init &rArr; FL_LPUART_WriteBitModulation
</UL>
<BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_LPUART_Init
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MF_PowerUp_Config_Init
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MF_Config_Init
<LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_IRQHandler
</UL>

<P><STRONG><a name="[144]"></a>MF_LPUART0_Interrupt_Init</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, mf_config.o(.text.MF_LPUART0_Interrupt_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = MF_LPUART0_Interrupt_Init &rArr; FL_LPUART_EnableIT_RXBuffFull
</UL>
<BR>[Calls]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_LPUART_EnableIT_RXBuffFull
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_LPUART_ClearFlag_RXBuffFull
</UL>
<BR>[Called By]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MF_PowerUp_Config_Init
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MF_Config_Init
<LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_IRQHandler
</UL>

<P><STRONG><a name="[1a3]"></a>MF_LPUART2_Init</STRONG> (Thumb, 92 bytes, Stack size 72 bytes, mf_config.o(.text.MF_LPUART2_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = MF_LPUART2_Init &rArr; FL_LPUART_Init &rArr; FL_LPUART_WriteBitModulation
</UL>
<BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_LPUART_Init
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MF_PowerUp_Config_Init
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MF_Config_Init
</UL>

<P><STRONG><a name="[1a4]"></a>MF_LPUART2_Interrupt_Init</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, mf_config.o(.text.MF_LPUART2_Interrupt_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = MF_LPUART2_Interrupt_Init &rArr; FL_LPUART_EnableIT_RXBuffFull
</UL>
<BR>[Calls]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_LPUART_EnableIT_RXBuffFull
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_LPUART_ClearFlag_RXBuffFull
</UL>
<BR>[Called By]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MF_PowerUp_Config_Init
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MF_Config_Init
</UL>

<P><STRONG><a name="[1aa]"></a>MF_NVIC_Init</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, mf_config.o(.text.MF_NVIC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = MF_NVIC_Init &rArr; FL_NVIC_Init &rArr; NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_NVIC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MF_PowerUp_Config_Init
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MF_Config_Init
</UL>

<P><STRONG><a name="[19c]"></a>MF_PMU_Init</STRONG> (Thumb, 40 bytes, Stack size 32 bytes, mf_config.o(.text.MF_PMU_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = MF_PMU_Init &rArr; FL_PMU_Sleep_Init &rArr; FL_PMU_SetWakeupDelay
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_PMU_Sleep_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MF_PowerUp_Config_Init
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MF_Config_Init
</UL>

<P><STRONG><a name="[1b0]"></a>MF_PowerUp_Config_Init</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, mf_config.o(.text.MF_PowerUp_Config_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = MF_PowerUp_Config_Init &rArr; MF_LPUART0_Init &rArr; FL_LPUART_Init &rArr; FL_LPUART_WriteBitModulation
</UL>
<BR>[Calls]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MF_SWD_IO_Init
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MF_SPI2_Init
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MF_SPI0_Init
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MF_PMU_Init
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MF_NVIC_Init
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MF_LPUART2_Interrupt_Init
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MF_LPUART2_Init
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MF_LPUART0_Interrupt_Init
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MF_LPUART0_Init
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MF_LPTIM32_TimerBase_Init
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MF_LPTIM32_Interrupt_Init
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MF_GPIO_Init
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MF_EXTI_Line3_Init
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MF_EXTI_Common_Init
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_VREF_Disable
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1a5]"></a>MF_RTCA_Init</STRONG> (Thumb, 40 bytes, Stack size 40 bytes, mf_config.o(.text.MF_RTCA_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = MF_RTCA_Init &rArr; FL_RTCA_Init &rArr; FL_RTCA_ConfigTime &rArr; FL_RTCA_WriteYear
</UL>
<BR>[Calls]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_RTCA_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MF_Config_Init
</UL>

<P><STRONG><a name="[1a6]"></a>MF_RTCA_Interrupt_Init</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, mf_config.o(.text.MF_RTCA_Interrupt_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = MF_RTCA_Interrupt_Init &rArr; FL_RTCA_EnableIT_Hour
</UL>
<BR>[Calls]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_RTCA_EnableIT_Hour
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_RTCA_ClearFlag_Hour
</UL>
<BR>[Called By]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MF_Config_Init
</UL>

<P><STRONG><a name="[1a7]"></a>MF_SPI0_Init</STRONG> (Thumb, 128 bytes, Stack size 96 bytes, mf_config.o(.text.MF_SPI0_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = MF_SPI0_Init &rArr; FL_GPIO_Init &rArr; FL_GPIO_SetPinMode
</UL>
<BR>[Calls]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_SPI_Init
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MF_PowerUp_Config_Init
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MF_Config_Init
</UL>

<P><STRONG><a name="[1a8]"></a>MF_SPI2_Init</STRONG> (Thumb, 136 bytes, Stack size 96 bytes, mf_config.o(.text.MF_SPI2_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = MF_SPI2_Init &rArr; FL_GPIO_Init &rArr; FL_GPIO_SetPinMode
</UL>
<BR>[Calls]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_SPI_Init
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MF_PowerUp_Config_Init
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MF_Config_Init
</UL>

<P><STRONG><a name="[1a9]"></a>MF_SWD_IO_Init</STRONG> (Thumb, 72 bytes, Stack size 48 bytes, mf_config.o(.text.MF_SWD_IO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = MF_SWD_IO_Init &rArr; FL_GPIO_Init &rArr; FL_GPIO_SetPinMode
</UL>
<BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MF_PowerUp_Config_Init
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MF_Config_Init
</UL>

<P><STRONG><a name="[75]"></a>ModeSet</STRONG> (Thumb, 132 bytes, Stack size 32 bytes, lora.o(.text.ModeSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ModeSet &rArr; FL_GPIO_SetOutputPin
</UL>
<BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_GPIO_SetOutputPin
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_GPIO_ResetOutputPin
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Update_Lora
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigWirlessModule
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpenTask
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnPeripheral
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisablePeripheral
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CloseTask
</UL>

<P><STRONG><a name="[8a]"></a>OpenTask</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, control.o(.text.OpenTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = OpenTask &rArr; ModeSet &rArr; FL_GPIO_SetOutputPin
</UL>
<BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModeSet
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlagStatusSet
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_LPTIM32_Enable
</UL>
<BR>[Called By]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoraRxPrce
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DevInit
</UL>

<P><STRONG><a name="[1b5]"></a>ProcessPktUID</STRONG> (Thumb, 172 bytes, Stack size 32 bytes, rs485comm.o(.text.ProcessPktUID))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = ProcessPktUID &rArr; UIDProcess &rArr; UID_WriteFlash &rArr; GD25QXX_Write &rArr; GD25QXX_Write_NoCheck &rArr; SPI_Flash_Write_Page &rArr; SPI_Flash_Wait_Busy &rArr; SPI_Flash_ReadSR &rArr; SPIx_ReadWriteByte &rArr; FL_DelayMsStart &rArr; FL_DelayUsStart
</UL>
<BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlagStatusIs
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlagStatusClear
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UIDProcess
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigWirlessModule
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSerialNo
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRC_Modbus
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[8]"></a>RTC_IRQHandler</STRONG> (Thumb, 112 bytes, Stack size 8 bytes, interrupt.o(.text.RTC_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = RTC_IRQHandler &rArr; FlagStatusSet
</UL>
<BR>[Calls]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlagStatusSet
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_RTCA_IsEnabledIT_Second
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_RTCA_IsEnabledIT_Hour
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_RTCA_IsActiveFlag_Second
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_RTCA_IsActiveFlag_Hour
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_RTCA_ClearFlag_Second
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_RTCA_ClearFlag_Hour
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_GPIO_ToggleOutputPin
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_fm33lg0xx.o(RESET)
</UL>
<P><STRONG><a name="[1bf]"></a>ReadDevPara</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, control.o(.text.ReadDevPara))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = ReadDevPara &rArr; GD25Q16_Read &rArr; SPI_Flash_Read &rArr; SPIx_ReadWriteByte &rArr; FL_DelayMsStart &rArr; FL_DelayUsStart
</UL>
<BR>[Calls]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StoreData
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_DelayMs
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GD25Q16_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1c1]"></a>RestoreDevPara</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, control.o(.text.RestoreDevPara))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = RestoreDevPara &rArr; strcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[133]"></a>SPI_FLASH_Write_Enable</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, gd25q_driver.o(.text.SPI_FLASH_Write_Enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = SPI_FLASH_Write_Enable &rArr; SPIx_ReadWriteByte &rArr; FL_DelayMsStart &rArr; FL_DelayUsStart
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIx_ReadWriteByte
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cs
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cd
</UL>
<BR>[Called By]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Flash_Write_Page
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GD25QXX_Erase_Sector
</UL>

<P><STRONG><a name="[131]"></a>SPI_Flash_Read</STRONG> (Thumb, 116 bytes, Stack size 32 bytes, gd25q_driver.o(.text.SPI_Flash_Read))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = SPI_Flash_Read &rArr; SPIx_ReadWriteByte &rArr; FL_DelayMsStart &rArr; FL_DelayUsStart
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIx_ReadWriteByte
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cs
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cd
</UL>
<BR>[Called By]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GD25Q16_Read
</UL>

<P><STRONG><a name="[1c3]"></a>SPI_Flash_ReadSR</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, gd25q_driver.o(.text.SPI_Flash_ReadSR))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = SPI_Flash_ReadSR &rArr; SPIx_ReadWriteByte &rArr; FL_DelayMsStart &rArr; FL_DelayUsStart
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIx_ReadWriteByte
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cs
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cd
</UL>
<BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Flash_Wait_Busy
</UL>

<P><STRONG><a name="[134]"></a>SPI_Flash_Wait_Busy</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, gd25q_driver.o(.text.SPI_Flash_Wait_Busy))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = SPI_Flash_Wait_Busy &rArr; SPI_Flash_ReadSR &rArr; SPIx_ReadWriteByte &rArr; FL_DelayMsStart &rArr; FL_DelayUsStart
</UL>
<BR>[Calls]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Flash_ReadSR
</UL>
<BR>[Called By]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Flash_Write_Page
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GD25QXX_Erase_Sector
</UL>

<P><STRONG><a name="[13a]"></a>SPI_Flash_Write_Page</STRONG> (Thumb, 124 bytes, Stack size 32 bytes, gd25q_driver.o(.text.SPI_Flash_Write_Page))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = SPI_Flash_Write_Page &rArr; SPI_Flash_Wait_Busy &rArr; SPI_Flash_ReadSR &rArr; SPIx_ReadWriteByte &rArr; FL_DelayMsStart &rArr; FL_DelayUsStart
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIx_ReadWriteByte
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cs
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cd
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Flash_Wait_Busy
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_Write_Enable
</UL>
<BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GD25QXX_Write_NoCheck
</UL>

<P><STRONG><a name="[136]"></a>SPIx_ReadWriteByte</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, gd25q_driver.o(.text.SPIx_ReadWriteByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = SPIx_ReadWriteByte &rArr; FL_DelayMsStart &rArr; FL_DelayUsStart
</UL>
<BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_DelayMsStart
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_DelayEnd
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_SPI_WriteTXBuff
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_SPI_ReadRXBuff
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_SPI_IsActiveFlag_TXBuffEmpty
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_SPI_IsActiveFlag_RXBuffFull
</UL>
<BR>[Called By]<UL><LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dsm_write_reg
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dsm_read_reg
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GD25_Wakeup
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GD25_Sleep
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Flash_Write_Page
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Flash_ReadSR
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Flash_Read
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_Write_Enable
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GD25QXX_Erase_Sector
</UL>

<P><STRONG><a name="[1b6]"></a>SetSerialNo</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, control.o(.text.SetSerialNo))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = SetSerialNo &rArr; strncpy
</UL>
<BR>[Calls]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlagStatusSet
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessPktUID
</UL>

<P><STRONG><a name="[1c0]"></a>StoreData</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, flashdata.o(.text.StoreData))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = StoreData &rArr; GD25_Wakeup &rArr; SPIx_ReadWriteByte &rArr; FL_DelayMsStart &rArr; FL_DelayUsStart
</UL>
<BR>[Calls]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GD25_Wakeup
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GD25_Sleep
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlagStatusIs
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlagStatusClear
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_DelayMs
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WritePktFlash
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadDevPara
</UL>

<P><STRONG><a name="[1c9]"></a>SysSleep</STRONG> (Thumb, 220 bytes, Stack size 16 bytes, control.o(.text.SysSleep))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = SysSleep &rArr; EnPeripheral &rArr; GetRFChan &rArr; HAL_UART_Transmit &rArr; FL_DelayMsStart &rArr; FL_DelayUsStart
</UL>
<BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlagStatusIs
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnPeripheral
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisablePeripheral
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_RMU_PDR_Enable
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_RMU_PDR_Disable
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_RMU_BOR_Enable
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_RMU_BOR_Disable
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_PMU_SetLowPowerMode
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_GPIO_ResetOutputPin
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_CDIF_DisableCPUToVAO
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[199]"></a>SystemCoreClockUpdate</STRONG> (Thumb, 348 bytes, Stack size 24 bytes, system_fm33lg0xx.o(.text.SystemCoreClockUpdate))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SystemCoreClockUpdate &rArr; SystemPLLClockUpdate
</UL>
<BR>[Calls]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemPLLClockUpdate
</UL>
<BR>[Called By]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MF_Clock_Init
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[26]"></a>SystemInit</STRONG> (Thumb, 232 bytes, Stack size 24 bytes, system_fm33lg0xx.o(.text.SystemInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = SystemInit &rArr; SystemCoreClockUpdate &rArr; SystemPLLClockUpdate
</UL>
<BR>[Calls]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_fm33lg0xx.o(.text)
</UL>
<P><STRONG><a name="[78]"></a>TransmitData</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, lora.o(.text.TransmitData))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = TransmitData &rArr; HAL_UART_Transmit &rArr; FL_DelayMsStart &rArr; FL_DelayUsStart
</UL>
<BR>[Calls]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit
</UL>
<BR>[Called By]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Update_Lora
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigWirlessModule
</UL>

<P><STRONG><a name="[1b7]"></a>UIDProcess</STRONG> (Thumb, 88 bytes, Stack size 48 bytes, rs485comm.o(.text.UIDProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = UIDProcess &rArr; UID_WriteFlash &rArr; GD25QXX_Write &rArr; GD25QXX_Write_NoCheck &rArr; SPI_Flash_Write_Page &rArr; SPI_Flash_Wait_Busy &rArr; SPI_Flash_ReadSR &rArr; SPIx_ReadWriteByte &rArr; FL_DelayMsStart &rArr; FL_DelayUsStart
</UL>
<BR>[Calls]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UID_ReadMCU
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UID_En_Decrypt
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GD25_Wakeup
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GD25_Sleep
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlagStatusClear
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_DelayMs
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_RTCA_DisableIT_Second
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_RTCA_ClearFlag_Second
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_GPIO_ResetOutputPin
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UID_WriteFlash
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_LPUART_DeInit
</UL>
<BR>[Called By]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessPktUID
</UL>

<P><STRONG><a name="[1d2]"></a>UID_En_Decrypt</STRONG> (Thumb, 82 bytes, Stack size 40 bytes, control.o(.text.UID_En_Decrypt))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = UID_En_Decrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UIDProcess
</UL>

<P><STRONG><a name="[1d7]"></a>UID_ReadFlash</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, control.o(.text.UID_ReadFlash))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = UID_ReadFlash &rArr; GD25Q16_Read &rArr; SPI_Flash_Read &rArr; SPIx_ReadWriteByte &rArr; FL_DelayMsStart &rArr; FL_DelayUsStart
</UL>
<BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_DelayMs
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GD25Q16_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1d1]"></a>UID_ReadMCU</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, control.o(.text.UID_ReadMCU))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UID_ReadMCU
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UIDProcess
</UL>

<P><STRONG><a name="[1d3]"></a>UID_WriteFlash</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, control.o(.text.UID_WriteFlash))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = UID_WriteFlash &rArr; GD25QXX_Write &rArr; GD25QXX_Write_NoCheck &rArr; SPI_Flash_Write_Page &rArr; SPI_Flash_Wait_Busy &rArr; SPI_Flash_ReadSR &rArr; SPIx_ReadWriteByte &rArr; FL_DelayMsStart &rArr; FL_DelayUsStart
</UL>
<BR>[Calls]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GD25QXX_Write
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_DelayMs
</UL>
<BR>[Called By]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UIDProcess
</UL>

<P><STRONG><a name="[1d8]"></a>Update_Lora</STRONG> (Thumb, 504 bytes, Stack size 104 bytes, lora.o(.text.Update_Lora))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = Update_Lora &rArr; TransmitData &rArr; HAL_UART_Transmit &rArr; FL_DelayMsStart &rArr; FL_DelayUsStart
</UL>
<BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModeSet
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlagStatusIs
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlagStatusClear
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TransmitData
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_GPIO_GetInputPin
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_DelayMsStart
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_DelayEnd
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRC_Modbus
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1c8]"></a>WritePktFlash</STRONG> (Thumb, 14 bytes, Stack size 16 bytes, gd25q_driver.o(.text.WritePktFlash))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = WritePktFlash
</UL>
<BR>[Called By]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StoreData
</UL>

<P><STRONG><a name="[137]"></a>cd</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, gd25q_driver.o(.text.cd))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = cd &rArr; FL_GPIO_SetOutputPin
</UL>
<BR>[Calls]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_GPIO_SetOutputPin
</UL>
<BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GD25_Wakeup
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GD25_Sleep
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Flash_Write_Page
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Flash_ReadSR
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Flash_Read
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_Write_Enable
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GD25QXX_Erase_Sector
</UL>

<P><STRONG><a name="[135]"></a>cs</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, gd25q_driver.o(.text.cs))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = cs &rArr; FL_GPIO_ResetOutputPin
</UL>
<BR>[Calls]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_GPIO_ResetOutputPin
</UL>
<BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GD25_Wakeup
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GD25_Sleep
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Flash_Write_Page
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Flash_ReadSR
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Flash_Read
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_Write_Enable
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GD25QXX_Erase_Sector
</UL>

<P><STRONG><a name="[15c]"></a>lsm6dsmActInit</STRONG> (Thumb, 244 bytes, Stack size 56 bytes, imu.o(.text.lsm6dsmActInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = lsm6dsmActInit &rArr; lsm6dsm_pin_int2_route_set &rArr; lsm6dsm_read_reg &rArr; SPIx_ReadWriteByte &rArr; FL_DelayMsStart &rArr; FL_DelayUsStart
</UL>
<BR>[Calls]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dsm_xl_full_scale_set
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dsm_xl_data_rate_set
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dsm_wkup_threshold_set
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dsm_wkup_dur_set
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dsm_reset_set
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dsm_reset_get
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dsm_pin_int2_route_set
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dsm_pin_int2_route_get
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dsm_pin_int1_route_set
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dsm_pin_int1_route_get
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dsm_gy_power_mode_set
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dsm_gy_full_scale_set
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dsm_gy_data_rate_set
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dsm_device_id_get
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dsm_act_sleep_dur_set
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dsm_act_mode_set
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlagStatusSet
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_DelayMs
</UL>
<BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDryrate0
</UL>

<P><STRONG><a name="[84]"></a>lsm6dsmDeInit</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, imu.o(.text.lsm6dsmDeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = lsm6dsmDeInit &rArr; lsm6dsm_xl_data_rate_set &rArr; lsm6dsm_read_reg &rArr; SPIx_ReadWriteByte &rArr; FL_DelayMsStart &rArr; FL_DelayUsStart
</UL>
<BR>[Calls]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dsm_xl_data_rate_set
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dsm_reset_set
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dsm_gy_data_rate_set
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_DelayMs
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DevDeInit
</UL>

<P><STRONG><a name="[89]"></a>lsm6dsmHiInit</STRONG> (Thumb, 204 bytes, Stack size 56 bytes, imu.o(.text.lsm6dsmHiInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = lsm6dsmHiInit &rArr; lsm6dsm_pin_int2_route_set &rArr; lsm6dsm_read_reg &rArr; SPIx_ReadWriteByte &rArr; FL_DelayMsStart &rArr; FL_DelayUsStart
</UL>
<BR>[Calls]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dsm_xl_full_scale_set
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dsm_xl_data_rate_set
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dsm_reset_set
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dsm_reset_get
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dsm_pin_int2_route_set
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dsm_pin_int2_route_get
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dsm_pin_int1_route_set
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dsm_pin_int1_route_get
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dsm_gy_power_mode_set
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dsm_gy_full_scale_set
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dsm_gy_data_rate_set
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dsm_device_id_get
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlagStatusSet
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_DelayMs
</UL>
<BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDryrate0
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DevInit
</UL>

<P><STRONG><a name="[147]"></a>lsm6dsm_acceleration_raw_get</STRONG> (Thumb, 88 bytes, Stack size 32 bytes, lsm6dsm_reg.o(.text.lsm6dsm_acceleration_raw_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = lsm6dsm_acceleration_raw_get &rArr; lsm6dsm_read_reg &rArr; SPIx_ReadWriteByte &rArr; FL_DelayMsStart &rArr; FL_DelayUsStart
</UL>
<BR>[Calls]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dsm_read_reg
</UL>
<BR>[Called By]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetAcc
</UL>

<P><STRONG><a name="[1e7]"></a>lsm6dsm_act_mode_set</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, lsm6dsm_reg.o(.text.lsm6dsm_act_mode_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = lsm6dsm_act_mode_set &rArr; lsm6dsm_read_reg &rArr; SPIx_ReadWriteByte &rArr; FL_DelayMsStart &rArr; FL_DelayUsStart
</UL>
<BR>[Calls]<UL><LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dsm_write_reg
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dsm_read_reg
</UL>
<BR>[Called By]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dsmActInit
</UL>

<P><STRONG><a name="[1e5]"></a>lsm6dsm_act_sleep_dur_set</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, lsm6dsm_reg.o(.text.lsm6dsm_act_sleep_dur_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = lsm6dsm_act_sleep_dur_set &rArr; lsm6dsm_read_reg &rArr; SPIx_ReadWriteByte &rArr; FL_DelayMsStart &rArr; FL_DelayUsStart
</UL>
<BR>[Calls]<UL><LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dsm_write_reg
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dsm_read_reg
</UL>
<BR>[Called By]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dsmActInit
</UL>

<P><STRONG><a name="[15f]"></a>lsm6dsm_all_sources_get</STRONG> (Thumb, 252 bytes, Stack size 24 bytes, lsm6dsm_reg.o(.text.lsm6dsm_all_sources_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = lsm6dsm_all_sources_get &rArr; lsm6dsm_mem_bank_set &rArr; lsm6dsm_read_reg &rArr; SPIx_ReadWriteByte &rArr; FL_DelayMsStart &rArr; FL_DelayUsStart
</UL>
<BR>[Calls]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dsm_read_reg
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dsm_mem_bank_set
</UL>
<BR>[Called By]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetGsense
</UL>

<P><STRONG><a name="[15d]"></a>lsm6dsm_angular_rate_raw_get</STRONG> (Thumb, 88 bytes, Stack size 32 bytes, lsm6dsm_reg.o(.text.lsm6dsm_angular_rate_raw_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = lsm6dsm_angular_rate_raw_get &rArr; lsm6dsm_read_reg &rArr; SPIx_ReadWriteByte &rArr; FL_DelayMsStart &rArr; FL_DelayUsStart
</UL>
<BR>[Calls]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dsm_read_reg
</UL>
<BR>[Called By]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetGry
</UL>

<P><STRONG><a name="[87]"></a>lsm6dsm_device_id_get</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, lsm6dsm_reg.o(.text.lsm6dsm_device_id_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = lsm6dsm_device_id_get &rArr; lsm6dsm_read_reg &rArr; SPIx_ReadWriteByte &rArr; FL_DelayMsStart &rArr; FL_DelayUsStart
</UL>
<BR>[Calls]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dsm_read_reg
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dsmHiInit
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dsmActInit
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DevInit
</UL>

<P><STRONG><a name="[15a]"></a>lsm6dsm_from_1000dps_to_dps</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, lsm6dsm_reg.o(.text.lsm6dsm_from_1000dps_to_dps))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = lsm6dsm_from_1000dps_to_dps &rArr; __aeabi_fmul
</UL>
<BR>[Calls]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
</UL>
<BR>[Called By]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetGsense
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDryrate0
</UL>

<P><STRONG><a name="[150]"></a>lsm6dsm_from_fs2g_to_mg</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, lsm6dsm_reg.o(.text.lsm6dsm_from_fs2g_to_mg))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = lsm6dsm_from_fs2g_to_mg &rArr; __aeabi_fmul
</UL>
<BR>[Calls]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
</UL>
<BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDryrate0
</UL>

<P><STRONG><a name="[1e3]"></a>lsm6dsm_gy_data_rate_set</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, lsm6dsm_reg.o(.text.lsm6dsm_gy_data_rate_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = lsm6dsm_gy_data_rate_set &rArr; lsm6dsm_read_reg &rArr; SPIx_ReadWriteByte &rArr; FL_DelayMsStart &rArr; FL_DelayUsStart
</UL>
<BR>[Calls]<UL><LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dsm_write_reg
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dsm_read_reg
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dsmHiInit
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dsmDeInit
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dsmActInit
</UL>

<P><STRONG><a name="[1e2]"></a>lsm6dsm_gy_full_scale_set</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, lsm6dsm_reg.o(.text.lsm6dsm_gy_full_scale_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = lsm6dsm_gy_full_scale_set &rArr; lsm6dsm_read_reg &rArr; SPIx_ReadWriteByte &rArr; FL_DelayMsStart &rArr; FL_DelayUsStart
</UL>
<BR>[Calls]<UL><LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dsm_write_reg
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dsm_read_reg
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dsmHiInit
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dsmActInit
</UL>

<P><STRONG><a name="[1e1]"></a>lsm6dsm_gy_power_mode_set</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, lsm6dsm_reg.o(.text.lsm6dsm_gy_power_mode_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = lsm6dsm_gy_power_mode_set &rArr; lsm6dsm_read_reg &rArr; SPIx_ReadWriteByte &rArr; FL_DelayMsStart &rArr; FL_DelayUsStart
</UL>
<BR>[Calls]<UL><LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dsm_write_reg
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dsm_read_reg
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dsmHiInit
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dsmActInit
</UL>

<P><STRONG><a name="[1ee]"></a>lsm6dsm_mem_bank_set</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, lsm6dsm_reg.o(.text.lsm6dsm_mem_bank_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = lsm6dsm_mem_bank_set &rArr; lsm6dsm_read_reg &rArr; SPIx_ReadWriteByte &rArr; FL_DelayMsStart &rArr; FL_DelayUsStart
</UL>
<BR>[Calls]<UL><LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dsm_write_reg
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dsm_read_reg
</UL>
<BR>[Called By]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dsm_all_sources_get
</UL>

<P><STRONG><a name="[1e8]"></a>lsm6dsm_pin_int1_route_get</STRONG> (Thumb, 436 bytes, Stack size 64 bytes, lsm6dsm_reg.o(.text.lsm6dsm_pin_int1_route_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = lsm6dsm_pin_int1_route_get &rArr; lsm6dsm_read_reg &rArr; SPIx_ReadWriteByte &rArr; FL_DelayMsStart &rArr; FL_DelayUsStart
</UL>
<BR>[Calls]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dsm_read_reg
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dsmHiInit
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dsmActInit
</UL>

<P><STRONG><a name="[1e9]"></a>lsm6dsm_pin_int1_route_set</STRONG> (Thumb, 756 bytes, Stack size 72 bytes, lsm6dsm_reg.o(.text.lsm6dsm_pin_int1_route_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = lsm6dsm_pin_int1_route_set &rArr; lsm6dsm_read_reg &rArr; SPIx_ReadWriteByte &rArr; FL_DelayMsStart &rArr; FL_DelayUsStart
</UL>
<BR>[Calls]<UL><LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dsm_write_reg
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dsm_read_reg
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dsmHiInit
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dsmActInit
</UL>

<P><STRONG><a name="[1ea]"></a>lsm6dsm_pin_int2_route_get</STRONG> (Thumb, 396 bytes, Stack size 64 bytes, lsm6dsm_reg.o(.text.lsm6dsm_pin_int2_route_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = lsm6dsm_pin_int2_route_get &rArr; lsm6dsm_read_reg &rArr; SPIx_ReadWriteByte &rArr; FL_DelayMsStart &rArr; FL_DelayUsStart
</UL>
<BR>[Calls]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dsm_read_reg
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dsmHiInit
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dsmActInit
</UL>

<P><STRONG><a name="[1eb]"></a>lsm6dsm_pin_int2_route_set</STRONG> (Thumb, 692 bytes, Stack size 72 bytes, lsm6dsm_reg.o(.text.lsm6dsm_pin_int2_route_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = lsm6dsm_pin_int2_route_set &rArr; lsm6dsm_read_reg &rArr; SPIx_ReadWriteByte &rArr; FL_DelayMsStart &rArr; FL_DelayUsStart
</UL>
<BR>[Calls]<UL><LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dsm_write_reg
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dsm_read_reg
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dsmHiInit
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dsmActInit
</UL>

<P><STRONG><a name="[1ec]"></a>lsm6dsm_read_reg</STRONG> (Thumb, 112 bytes, Stack size 40 bytes, imu.o(.text.lsm6dsm_read_reg))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = lsm6dsm_read_reg &rArr; SPIx_ReadWriteByte &rArr; FL_DelayMsStart &rArr; FL_DelayUsStart
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIx_ReadWriteByte
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_GPIO_SetOutputPin
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_GPIO_ResetOutputPin
</UL>
<BR>[Called By]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dsm_xl_full_scale_set
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dsm_xl_data_rate_set
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dsm_wkup_threshold_set
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dsm_wkup_dur_set
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dsm_reset_set
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dsm_reset_get
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dsm_pin_int2_route_set
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dsm_pin_int2_route_get
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dsm_pin_int1_route_set
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dsm_pin_int1_route_get
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dsm_gy_power_mode_set
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dsm_gy_full_scale_set
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dsm_gy_data_rate_set
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dsm_device_id_get
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dsm_angular_rate_raw_get
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dsm_all_sources_get
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dsm_act_sleep_dur_set
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dsm_act_mode_set
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dsm_acceleration_raw_get
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dsm_mem_bank_set
</UL>

<P><STRONG><a name="[1de]"></a>lsm6dsm_reset_get</STRONG> (Thumb, 48 bytes, Stack size 32 bytes, lsm6dsm_reg.o(.text.lsm6dsm_reset_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = lsm6dsm_reset_get &rArr; lsm6dsm_read_reg &rArr; SPIx_ReadWriteByte &rArr; FL_DelayMsStart &rArr; FL_DelayUsStart
</UL>
<BR>[Calls]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dsm_read_reg
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dsmHiInit
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dsmActInit
</UL>

<P><STRONG><a name="[1dd]"></a>lsm6dsm_reset_set</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, lsm6dsm_reg.o(.text.lsm6dsm_reset_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = lsm6dsm_reset_set &rArr; lsm6dsm_read_reg &rArr; SPIx_ReadWriteByte &rArr; FL_DelayMsStart &rArr; FL_DelayUsStart
</UL>
<BR>[Calls]<UL><LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dsm_write_reg
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dsm_read_reg
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dsmHiInit
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dsmDeInit
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dsmActInit
</UL>

<P><STRONG><a name="[1e4]"></a>lsm6dsm_wkup_dur_set</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, lsm6dsm_reg.o(.text.lsm6dsm_wkup_dur_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = lsm6dsm_wkup_dur_set &rArr; lsm6dsm_read_reg &rArr; SPIx_ReadWriteByte &rArr; FL_DelayMsStart &rArr; FL_DelayUsStart
</UL>
<BR>[Calls]<UL><LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dsm_write_reg
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dsm_read_reg
</UL>
<BR>[Called By]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dsmActInit
</UL>

<P><STRONG><a name="[1e6]"></a>lsm6dsm_wkup_threshold_set</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, lsm6dsm_reg.o(.text.lsm6dsm_wkup_threshold_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = lsm6dsm_wkup_threshold_set &rArr; lsm6dsm_read_reg &rArr; SPIx_ReadWriteByte &rArr; FL_DelayMsStart &rArr; FL_DelayUsStart
</UL>
<BR>[Calls]<UL><LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dsm_write_reg
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dsm_read_reg
</UL>
<BR>[Called By]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dsmActInit
</UL>

<P><STRONG><a name="[1ed]"></a>lsm6dsm_write_reg</STRONG> (Thumb, 100 bytes, Stack size 32 bytes, imu.o(.text.lsm6dsm_write_reg))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = lsm6dsm_write_reg &rArr; SPIx_ReadWriteByte &rArr; FL_DelayMsStart &rArr; FL_DelayUsStart
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIx_ReadWriteByte
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_GPIO_SetOutputPin
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_GPIO_ResetOutputPin
</UL>
<BR>[Called By]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dsm_xl_full_scale_set
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dsm_xl_data_rate_set
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dsm_wkup_threshold_set
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dsm_wkup_dur_set
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dsm_reset_set
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dsm_pin_int2_route_set
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dsm_pin_int1_route_set
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dsm_gy_power_mode_set
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dsm_gy_full_scale_set
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dsm_gy_data_rate_set
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dsm_act_sleep_dur_set
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dsm_act_mode_set
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dsm_mem_bank_set
</UL>

<P><STRONG><a name="[1e0]"></a>lsm6dsm_xl_data_rate_set</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, lsm6dsm_reg.o(.text.lsm6dsm_xl_data_rate_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = lsm6dsm_xl_data_rate_set &rArr; lsm6dsm_read_reg &rArr; SPIx_ReadWriteByte &rArr; FL_DelayMsStart &rArr; FL_DelayUsStart
</UL>
<BR>[Calls]<UL><LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dsm_write_reg
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dsm_read_reg
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dsmHiInit
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dsmDeInit
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dsmActInit
</UL>

<P><STRONG><a name="[1df]"></a>lsm6dsm_xl_full_scale_set</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, lsm6dsm_reg.o(.text.lsm6dsm_xl_full_scale_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = lsm6dsm_xl_full_scale_set &rArr; lsm6dsm_read_reg &rArr; SPIx_ReadWriteByte &rArr; FL_DelayMsStart &rArr; FL_DelayUsStart
</UL>
<BR>[Calls]<UL><LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dsm_write_reg
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dsm_read_reg
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dsmHiInit
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dsmActInit
</UL>

<P><STRONG><a name="[46]"></a>main</STRONG> (Thumb, 456 bytes, Stack size 88 bytes, main.o(.text.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 664<LI>Call Chain = main &rArr; GetGsense &rArr; pow &rArr; __kernel_poly &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Update_Lora
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UID_ReadMCU
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UID_ReadFlash
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UID_En_Decrypt
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysSleep
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StoreData
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RestoreDevPara
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadDevPara
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessPktUID
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModeSet
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoraRxPrce
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetVoltage
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetGsense
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDryrate0
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GD25_Wakeup
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GD25_Sleep
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GD25QXX_Write
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlagStatusSet
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlagStatusIs
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlagStatusClear
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_Init
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DevInit
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DevDeInit
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_SPI_Enable
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_LPUART_EnableTX
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_LPUART_EnableRX
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_LPUART_ClearFlag_RXBuffOverflow
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_LPUART_ClearFlag_RXBuffFull
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_LPUART_ClearFlag_FrameError
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_GPIO_ToggleOutputPin
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_GPIO_SetOutputPin
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_GPIO_ResetOutputPin
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MF_PowerUp_Config_Init
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MF_Config_Init
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MF_Clock_Init
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_DelayMs
</UL>
<BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[208]"></a>__ARM_fpclassify</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, fpclassify.o(i.__ARM_fpclassify))
<BR><BR>[Called By]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
</UL>

<P><STRONG><a name="[1f8]"></a>__kernel_poly</STRONG> (Thumb, 172 bytes, Stack size 24 bytes, poly.o(i.__kernel_poly))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = __kernel_poly &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
</UL>

<P><STRONG><a name="[1f9]"></a>__mathlib_dbl_divzero</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, dunder.o(i.__mathlib_dbl_divzero))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = __mathlib_dbl_divzero &rArr; __aeabi_ddiv
</UL>
<BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
</UL>

<P><STRONG><a name="[1fa]"></a>__mathlib_dbl_infnan2</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, dunder.o(i.__mathlib_dbl_infnan2))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __mathlib_dbl_infnan2 &rArr; __aeabi_dadd
</UL>
<BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
</UL>

<P><STRONG><a name="[1fb]"></a>__mathlib_dbl_invalid</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, dunder.o(i.__mathlib_dbl_invalid))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = __mathlib_dbl_invalid &rArr; __aeabi_ddiv
</UL>
<BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
</UL>

<P><STRONG><a name="[1fc]"></a>__mathlib_dbl_overflow</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, dunder.o(i.__mathlib_dbl_overflow))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __mathlib_dbl_overflow &rArr; __ARM_scalbn
</UL>
<BR>[Calls]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
</UL>
<BR>[Called By]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
</UL>

<P><STRONG><a name="[1fe]"></a>__mathlib_dbl_underflow</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, dunder.o(i.__mathlib_dbl_underflow))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __mathlib_dbl_underflow &rArr; __ARM_scalbn
</UL>
<BR>[Calls]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
</UL>
<BR>[Called By]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
</UL>

<P><STRONG><a name="[159]"></a>__aeabi_dcmpge</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, dcmp.o(i._dgeq))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_dcmpge
</UL>
<BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDryrate0
</UL>

<P><STRONG><a name="[1ff]"></a>_dgeq</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, dcmp.o(i._dgeq), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dcmpge
</UL>

<P><STRONG><a name="[162]"></a>__aeabi_dcmplt</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, dcmp.o(i._dls))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_dcmplt
</UL>
<BR>[Called By]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetGsense
</UL>

<P><STRONG><a name="[201]"></a>_dls</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, dcmp.o(i._dls), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dcmple
</UL>

<P><STRONG><a name="[154]"></a>__aeabi_fcmpge</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, fcmp.o(i._fgeq))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_fcmpge
</UL>
<BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDryrate0
</UL>

<P><STRONG><a name="[203]"></a>_fgeq</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, fcmp.o(i._fgeq), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fcmpge
</UL>

<P><STRONG><a name="[152]"></a>pow</STRONG> (Thumb, 2506 bytes, Stack size 120 bytes, pow.o(i.pow))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = pow &rArr; __kernel_poly &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_overflow
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_invalid
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan2
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_divzero
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetGsense
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDryrate0
</UL>

<P><STRONG><a name="[153]"></a>sqrt</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, sqrt.o(i.sqrt))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = sqrt &rArr; _dsqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsqrt
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetGsense
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDryrate0
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
</UL>

<P><STRONG><a name="[200]"></a>_dcmpge</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, dgef.o(x$fpl$dgeqf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcmp_InfNaN
</UL>
<BR>[Called By]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dgeq
</UL>

<P><STRONG><a name="[248]"></a>__aeabi_cdcmple</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, dlef.o(x$fpl$dleqf), UNUSED)

<P><STRONG><a name="[202]"></a>_dcmple</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, dlef.o(x$fpl$dleqf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcmp_InfNaN
</UL>
<BR>[Called By]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dls
</UL>

<P><STRONG><a name="[207]"></a>__aeabi_cdrcmple</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, drlef.o(x$fpl$drleqf))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_cdrcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
</UL>

<P><STRONG><a name="[20a]"></a>_drcmple</STRONG> (Thumb, 100 bytes, Stack size 32 bytes, drlef.o(x$fpl$drleqf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcmp_InfNaN
</UL>

<P><STRONG><a name="[156]"></a>__aeabi_fadd</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, faddsub.o(x$fpl$fadd))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_fadd
</UL>
<BR>[Called By]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetGsense
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDryrate0
</UL>

<P><STRONG><a name="[20b]"></a>_fadd</STRONG> (Thumb, 134 bytes, Stack size 16 bytes, faddsub.o(x$fpl$fadd), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fsub1
</UL>

<P><STRONG><a name="[204]"></a>_fcmpge</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, fgef.o(x$fpl$fgeqf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fcmp_InfNaN
</UL>
<BR>[Called By]<UL><LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fgeq
</UL>

<P><STRONG><a name="[161]"></a>__aeabi_fmul</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, fmul.o(x$fpl$fmul))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_fmul
</UL>
<BR>[Called By]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dsm_from_fs2g_to_mg
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dsm_from_1000dps_to_dps
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetGsense
</UL>

<P><STRONG><a name="[249]"></a>_fmul</STRONG> (Thumb, 172 bytes, Stack size 16 bytes, fmul.o(x$fpl$fmul), UNUSED)

<P><STRONG><a name="[158]"></a>__aeabi_fsub</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, faddsub.o(x$fpl$fsub))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_fsub
</UL>
<BR>[Called By]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetGsense
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDryrate0
</UL>

<P><STRONG><a name="[20d]"></a>_fsub</STRONG> (Thumb, 204 bytes, Stack size 16 bytes, faddsub.o(x$fpl$fsub), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fadd1
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[185]"></a>FL_ADC_EnableSequencerChannel</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, mf_config.o(.text.FL_ADC_EnableSequencerChannel))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = FL_ADC_EnableSequencerChannel
</UL>
<BR>[Called By]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MF_ADC_Sampling_Init
</UL>

<P><STRONG><a name="[188]"></a>FL_CDIF_EnableCPUToVAO</STRONG> (Thumb, 18 bytes, Stack size 4 bytes, mf_config.o(.text.FL_CDIF_EnableCPUToVAO))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = FL_CDIF_EnableCPUToVAO
</UL>
<BR>[Called By]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MF_Clock_Init
</UL>

<P><STRONG><a name="[189]"></a>FL_CDIF_EnableVAOToCPU</STRONG> (Thumb, 18 bytes, Stack size 4 bytes, mf_config.o(.text.FL_CDIF_EnableVAOToCPU))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = FL_CDIF_EnableVAOToCPU
</UL>
<BR>[Called By]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MF_Clock_Init
</UL>

<P><STRONG><a name="[198]"></a>FL_CDIF_SetPrescaler</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, mf_config.o(.text.FL_CDIF_SetPrescaler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = FL_CDIF_SetPrescaler
</UL>
<BR>[Called By]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MF_Clock_Init
</UL>

<P><STRONG><a name="[18c]"></a>FL_CMU_DisableGroup1BusClock</STRONG> (Thumb, 20 bytes, Stack size 4 bytes, mf_config.o(.text.FL_CMU_DisableGroup1BusClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = FL_CMU_DisableGroup1BusClock
</UL>
<BR>[Called By]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MF_Clock_Init
</UL>

<P><STRONG><a name="[18a]"></a>FL_CMU_EnableGroup1BusClock</STRONG> (Thumb, 20 bytes, Stack size 4 bytes, mf_config.o(.text.FL_CMU_EnableGroup1BusClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = FL_CMU_EnableGroup1BusClock
</UL>
<BR>[Called By]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MF_Clock_Init
</UL>

<P><STRONG><a name="[190]"></a>FL_CMU_EnableLSCLKAutoSwitch</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, mf_config.o(.text.FL_CMU_EnableLSCLKAutoSwitch))
<BR><BR>[Called By]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MF_Clock_Init
</UL>

<P><STRONG><a name="[193]"></a>FL_CMU_RCHF_Enable</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, mf_config.o(.text.FL_CMU_RCHF_Enable))
<BR><BR>[Called By]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MF_Clock_Init
</UL>

<P><STRONG><a name="[192]"></a>FL_CMU_RCHF_SetFrequency</STRONG> (Thumb, 24 bytes, Stack size 4 bytes, mf_config.o(.text.FL_CMU_RCHF_SetFrequency))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = FL_CMU_RCHF_SetFrequency
</UL>
<BR>[Called By]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MF_Clock_Init
</UL>

<P><STRONG><a name="[191]"></a>FL_CMU_RCHF_WriteTrimValue</STRONG> (Thumb, 24 bytes, Stack size 4 bytes, mf_config.o(.text.FL_CMU_RCHF_WriteTrimValue))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = FL_CMU_RCHF_WriteTrimValue
</UL>
<BR>[Called By]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MF_Clock_Init
</UL>

<P><STRONG><a name="[196]"></a>FL_CMU_SetAHBPrescaler</STRONG> (Thumb, 24 bytes, Stack size 4 bytes, mf_config.o(.text.FL_CMU_SetAHBPrescaler))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = FL_CMU_SetAHBPrescaler
</UL>
<BR>[Called By]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MF_Clock_Init
</UL>

<P><STRONG><a name="[197]"></a>FL_CMU_SetAPBPrescaler</STRONG> (Thumb, 24 bytes, Stack size 4 bytes, mf_config.o(.text.FL_CMU_SetAPBPrescaler))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = FL_CMU_SetAPBPrescaler
</UL>
<BR>[Called By]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MF_Clock_Init
</UL>

<P><STRONG><a name="[18f]"></a>FL_CMU_SetLSCLKClockSource</STRONG> (Thumb, 24 bytes, Stack size 4 bytes, mf_config.o(.text.FL_CMU_SetLSCLKClockSource))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = FL_CMU_SetLSCLKClockSource
</UL>
<BR>[Called By]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MF_Clock_Init
</UL>

<P><STRONG><a name="[195]"></a>FL_CMU_SetSystemClockSource</STRONG> (Thumb, 24 bytes, Stack size 4 bytes, mf_config.o(.text.FL_CMU_SetSystemClockSource))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = FL_CMU_SetSystemClockSource
</UL>
<BR>[Called By]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MF_Clock_Init
</UL>

<P><STRONG><a name="[194]"></a>FL_FLASH_SetReadWait</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, mf_config.o(.text.FL_FLASH_SetReadWait))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = FL_FLASH_SetReadWait
</UL>
<BR>[Called By]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MF_Clock_Init
</UL>

<P><STRONG><a name="[1ab]"></a>FL_GPIO_SetOutputPin</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, mf_config.o(.text.FL_GPIO_SetOutputPin))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = FL_GPIO_SetOutputPin
</UL>
<BR>[Called By]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MF_GPIO_Init
</UL>

<P><STRONG><a name="[1ac]"></a>FL_LPTIM32_ClearFlag_Update</STRONG> (Thumb, 14 bytes, Stack size 4 bytes, mf_config.o(.text.FL_LPTIM32_ClearFlag_Update))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = FL_LPTIM32_ClearFlag_Update
</UL>
<BR>[Called By]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MF_LPTIM32_Interrupt_Init
</UL>

<P><STRONG><a name="[1ad]"></a>FL_LPTIM32_EnableIT_Update</STRONG> (Thumb, 18 bytes, Stack size 4 bytes, mf_config.o(.text.FL_LPTIM32_EnableIT_Update))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = FL_LPTIM32_EnableIT_Update
</UL>
<BR>[Called By]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MF_LPTIM32_Interrupt_Init
</UL>

<P><STRONG><a name="[1ae]"></a>FL_LPUART_ClearFlag_RXBuffFull</STRONG> (Thumb, 16 bytes, Stack size 4 bytes, mf_config.o(.text.FL_LPUART_ClearFlag_RXBuffFull))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = FL_LPUART_ClearFlag_RXBuffFull
</UL>
<BR>[Called By]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MF_LPUART2_Interrupt_Init
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MF_LPUART0_Interrupt_Init
</UL>

<P><STRONG><a name="[1af]"></a>FL_LPUART_EnableIT_RXBuffFull</STRONG> (Thumb, 20 bytes, Stack size 4 bytes, mf_config.o(.text.FL_LPUART_EnableIT_RXBuffFull))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = FL_LPUART_EnableIT_RXBuffFull
</UL>
<BR>[Called By]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MF_LPUART2_Interrupt_Init
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MF_LPUART0_Interrupt_Init
</UL>

<P><STRONG><a name="[1b2]"></a>FL_RTCA_ClearFlag_Hour</STRONG> (Thumb, 14 bytes, Stack size 4 bytes, mf_config.o(.text.FL_RTCA_ClearFlag_Hour))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = FL_RTCA_ClearFlag_Hour
</UL>
<BR>[Called By]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MF_RTCA_Interrupt_Init
</UL>

<P><STRONG><a name="[1b3]"></a>FL_RTCA_EnableIT_Hour</STRONG> (Thumb, 18 bytes, Stack size 4 bytes, mf_config.o(.text.FL_RTCA_EnableIT_Hour))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = FL_RTCA_EnableIT_Hour
</UL>
<BR>[Called By]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MF_RTCA_Interrupt_Init
</UL>

<P><STRONG><a name="[18b]"></a>FL_RTCA_WriteAdjustValue</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, mf_config.o(.text.FL_RTCA_WriteAdjustValue))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = FL_RTCA_WriteAdjustValue
</UL>
<BR>[Called By]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MF_Clock_Init
</UL>

<P><STRONG><a name="[18d]"></a>FL_RTCB_WriteAdjustValue</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, mf_config.o(.text.FL_RTCB_WriteAdjustValue))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = FL_RTCB_WriteAdjustValue
</UL>
<BR>[Called By]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MF_Clock_Init
</UL>

<P><STRONG><a name="[18e]"></a>FL_VAO_XTLF_Enable</STRONG> (Thumb, 16 bytes, Stack size 4 bytes, mf_config.o(.text.FL_VAO_XTLF_Enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = FL_VAO_XTLF_Enable
</UL>
<BR>[Called By]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MF_Clock_Init
</UL>

<P><STRONG><a name="[1b1]"></a>FL_VREF_Disable</STRONG> (Thumb, 18 bytes, Stack size 4 bytes, mf_config.o(.text.FL_VREF_Disable))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = FL_VREF_Disable
</UL>
<BR>[Called By]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MF_PowerUp_Config_Init
</UL>

<P><STRONG><a name="[1f6]"></a>FL_GPIO_ResetOutputPin</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, main.o(.text.FL_GPIO_ResetOutputPin))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = FL_GPIO_ResetOutputPin
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1ef]"></a>FL_GPIO_SetOutputPin</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, main.o(.text.FL_GPIO_SetOutputPin))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = FL_GPIO_SetOutputPin
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1f7]"></a>FL_GPIO_ToggleOutputPin</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, main.o(.text.FL_GPIO_ToggleOutputPin))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = FL_GPIO_ToggleOutputPin
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1f2]"></a>FL_LPUART_ClearFlag_FrameError</STRONG> (Thumb, 16 bytes, Stack size 4 bytes, main.o(.text.FL_LPUART_ClearFlag_FrameError))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = FL_LPUART_ClearFlag_FrameError
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1f3]"></a>FL_LPUART_ClearFlag_RXBuffFull</STRONG> (Thumb, 16 bytes, Stack size 4 bytes, main.o(.text.FL_LPUART_ClearFlag_RXBuffFull))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = FL_LPUART_ClearFlag_RXBuffFull
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1f4]"></a>FL_LPUART_ClearFlag_RXBuffOverflow</STRONG> (Thumb, 16 bytes, Stack size 4 bytes, main.o(.text.FL_LPUART_ClearFlag_RXBuffOverflow))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = FL_LPUART_ClearFlag_RXBuffOverflow
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1f1]"></a>FL_LPUART_EnableRX</STRONG> (Thumb, 18 bytes, Stack size 4 bytes, main.o(.text.FL_LPUART_EnableRX))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = FL_LPUART_EnableRX
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1f0]"></a>FL_LPUART_EnableTX</STRONG> (Thumb, 18 bytes, Stack size 4 bytes, main.o(.text.FL_LPUART_EnableTX))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = FL_LPUART_EnableTX
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1f5]"></a>FL_SPI_Enable</STRONG> (Thumb, 18 bytes, Stack size 4 bytes, main.o(.text.FL_SPI_Enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = FL_SPI_Enable
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[15b]"></a>FL_GPIO_ResetOutputPin</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, imu.o(.text.FL_GPIO_ResetOutputPin))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = FL_GPIO_ResetOutputPin
</UL>
<BR>[Called By]<UL><LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dsm_write_reg
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dsm_read_reg
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetGsense
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDryrate0
</UL>

<P><STRONG><a name="[155]"></a>FL_GPIO_SetOutputPin</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, imu.o(.text.FL_GPIO_SetOutputPin))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = FL_GPIO_SetOutputPin
</UL>
<BR>[Called By]<UL><LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dsm_write_reg
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsm6dsm_read_reg
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDryrate0
</UL>

<P><STRONG><a name="[160]"></a>FL_GPIO_ToggleOutputPin</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, imu.o(.text.FL_GPIO_ToggleOutputPin))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = FL_GPIO_ToggleOutputPin
</UL>
<BR>[Called By]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetGsense
</UL>

<P><STRONG><a name="[90]"></a>FL_ADC_Disable</STRONG> (Thumb, 18 bytes, Stack size 4 bytes, control.o(.text.FL_ADC_Disable))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = FL_ADC_Disable
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisablePeripheral
</UL>

<P><STRONG><a name="[1cc]"></a>FL_CDIF_DisableCPUToVAO</STRONG> (Thumb, 18 bytes, Stack size 4 bytes, control.o(.text.FL_CDIF_DisableCPUToVAO))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = FL_CDIF_DisableCPUToVAO
</UL>
<BR>[Called By]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysSleep
</UL>

<P><STRONG><a name="[88]"></a>FL_GPIO_ResetOutputPin</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, control.o(.text.FL_GPIO_ResetOutputPin))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = FL_GPIO_ResetOutputPin
</UL>
<BR>[Called By]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysSleep
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DevInit
</UL>

<P><STRONG><a name="[73]"></a>FL_LPTIM32_Disable</STRONG> (Thumb, 18 bytes, Stack size 4 bytes, control.o(.text.FL_LPTIM32_Disable))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = FL_LPTIM32_Disable
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisablePeripheral
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CloseTask
</UL>

<P><STRONG><a name="[97]"></a>FL_LPTIM32_Enable</STRONG> (Thumb, 18 bytes, Stack size 4 bytes, control.o(.text.FL_LPTIM32_Enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = FL_LPTIM32_Enable
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpenTask
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnPeripheral
</UL>

<P><STRONG><a name="[93]"></a>FL_LPUART_ClearFlag_FrameError</STRONG> (Thumb, 16 bytes, Stack size 4 bytes, control.o(.text.FL_LPUART_ClearFlag_FrameError))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = FL_LPUART_ClearFlag_FrameError
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnPeripheral
</UL>

<P><STRONG><a name="[94]"></a>FL_LPUART_ClearFlag_RXBuffFull</STRONG> (Thumb, 16 bytes, Stack size 4 bytes, control.o(.text.FL_LPUART_ClearFlag_RXBuffFull))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = FL_LPUART_ClearFlag_RXBuffFull
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnPeripheral
</UL>

<P><STRONG><a name="[95]"></a>FL_LPUART_ClearFlag_RXBuffOverflow</STRONG> (Thumb, 16 bytes, Stack size 4 bytes, control.o(.text.FL_LPUART_ClearFlag_RXBuffOverflow))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = FL_LPUART_ClearFlag_RXBuffOverflow
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnPeripheral
</UL>

<P><STRONG><a name="[8e]"></a>FL_LPUART_DisableRX</STRONG> (Thumb, 18 bytes, Stack size 4 bytes, control.o(.text.FL_LPUART_DisableRX))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = FL_LPUART_DisableRX
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisablePeripheral
</UL>

<P><STRONG><a name="[8d]"></a>FL_LPUART_DisableTX</STRONG> (Thumb, 18 bytes, Stack size 4 bytes, control.o(.text.FL_LPUART_DisableTX))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = FL_LPUART_DisableTX
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisablePeripheral
</UL>

<P><STRONG><a name="[92]"></a>FL_LPUART_EnableRX</STRONG> (Thumb, 18 bytes, Stack size 4 bytes, control.o(.text.FL_LPUART_EnableRX))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = FL_LPUART_EnableRX
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnPeripheral
</UL>

<P><STRONG><a name="[91]"></a>FL_LPUART_EnableTX</STRONG> (Thumb, 18 bytes, Stack size 4 bytes, control.o(.text.FL_LPUART_EnableTX))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = FL_LPUART_EnableTX
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnPeripheral
</UL>

<P><STRONG><a name="[1cd]"></a>FL_PMU_SetLowPowerMode</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, control.o(.text.FL_PMU_SetLowPowerMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = FL_PMU_SetLowPowerMode
</UL>
<BR>[Called By]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysSleep
</UL>

<P><STRONG><a name="[1cb]"></a>FL_RMU_BOR_Disable</STRONG> (Thumb, 18 bytes, Stack size 4 bytes, control.o(.text.FL_RMU_BOR_Disable))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = FL_RMU_BOR_Disable
</UL>
<BR>[Called By]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysSleep
</UL>

<P><STRONG><a name="[1cf]"></a>FL_RMU_BOR_Enable</STRONG> (Thumb, 18 bytes, Stack size 4 bytes, control.o(.text.FL_RMU_BOR_Enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = FL_RMU_BOR_Enable
</UL>
<BR>[Called By]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysSleep
</UL>

<P><STRONG><a name="[1ce]"></a>FL_RMU_PDR_Disable</STRONG> (Thumb, 18 bytes, Stack size 4 bytes, control.o(.text.FL_RMU_PDR_Disable))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = FL_RMU_PDR_Disable
</UL>
<BR>[Called By]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysSleep
</UL>

<P><STRONG><a name="[1ca]"></a>FL_RMU_PDR_Enable</STRONG> (Thumb, 18 bytes, Stack size 4 bytes, control.o(.text.FL_RMU_PDR_Enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = FL_RMU_PDR_Enable
</UL>
<BR>[Called By]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysSleep
</UL>

<P><STRONG><a name="[74]"></a>FL_RTCA_Disable</STRONG> (Thumb, 18 bytes, Stack size 4 bytes, control.o(.text.FL_RTCA_Disable))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = FL_RTCA_Disable
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CloseTask
</UL>

<P><STRONG><a name="[8f]"></a>FL_SPI_Disable</STRONG> (Thumb, 18 bytes, Stack size 4 bytes, control.o(.text.FL_SPI_Disable))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = FL_SPI_Disable
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisablePeripheral
</UL>

<P><STRONG><a name="[96]"></a>FL_SPI_Enable</STRONG> (Thumb, 18 bytes, Stack size 4 bytes, control.o(.text.FL_SPI_Enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = FL_SPI_Enable
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnPeripheral
</UL>

<P><STRONG><a name="[1dc]"></a>FL_GPIO_ResetOutputPin</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, gd25q_driver.o(.text.FL_GPIO_ResetOutputPin))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = FL_GPIO_ResetOutputPin
</UL>
<BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cs
</UL>

<P><STRONG><a name="[1db]"></a>FL_GPIO_SetOutputPin</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, gd25q_driver.o(.text.FL_GPIO_SetOutputPin))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = FL_GPIO_SetOutputPin
</UL>
<BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cd
</UL>

<P><STRONG><a name="[1c6]"></a>FL_SPI_IsActiveFlag_RXBuffFull</STRONG> (Thumb, 16 bytes, Stack size 4 bytes, gd25q_driver.o(.text.FL_SPI_IsActiveFlag_RXBuffFull))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = FL_SPI_IsActiveFlag_RXBuffFull
</UL>
<BR>[Called By]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIx_ReadWriteByte
</UL>

<P><STRONG><a name="[1c5]"></a>FL_SPI_IsActiveFlag_TXBuffEmpty</STRONG> (Thumb, 18 bytes, Stack size 4 bytes, gd25q_driver.o(.text.FL_SPI_IsActiveFlag_TXBuffEmpty))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = FL_SPI_IsActiveFlag_TXBuffEmpty
</UL>
<BR>[Called By]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIx_ReadWriteByte
</UL>

<P><STRONG><a name="[1c7]"></a>FL_SPI_ReadRXBuff</STRONG> (Thumb, 12 bytes, Stack size 4 bytes, gd25q_driver.o(.text.FL_SPI_ReadRXBuff))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = FL_SPI_ReadRXBuff
</UL>
<BR>[Called By]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIx_ReadWriteByte
</UL>

<P><STRONG><a name="[1c4]"></a>FL_SPI_WriteTXBuff</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, gd25q_driver.o(.text.FL_SPI_WriteTXBuff))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = FL_SPI_WriteTXBuff
</UL>
<BR>[Called By]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIx_ReadWriteByte
</UL>

<P><STRONG><a name="[16a]"></a>FL_ADC_ClearFlag_EndOfConversion</STRONG> (Thumb, 14 bytes, Stack size 4 bytes, getsensors.o(.text.FL_ADC_ClearFlag_EndOfConversion))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = FL_ADC_ClearFlag_EndOfConversion
</UL>
<BR>[Called By]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSingleChannelSample_POLL
</UL>

<P><STRONG><a name="[16f]"></a>FL_ADC_Disable</STRONG> (Thumb, 18 bytes, Stack size 4 bytes, getsensors.o(.text.FL_ADC_Disable))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = FL_ADC_Disable
</UL>
<BR>[Called By]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSingleChannelSample_POLL
</UL>

<P><STRONG><a name="[168]"></a>FL_ADC_DisableSequencerChannel</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, getsensors.o(.text.FL_ADC_DisableSequencerChannel))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = FL_ADC_DisableSequencerChannel
</UL>
<BR>[Called By]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSingleChannelSample_POLL
</UL>

<P><STRONG><a name="[16b]"></a>FL_ADC_Enable</STRONG> (Thumb, 18 bytes, Stack size 4 bytes, getsensors.o(.text.FL_ADC_Enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = FL_ADC_Enable
</UL>
<BR>[Called By]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSingleChannelSample_POLL
</UL>

<P><STRONG><a name="[16c]"></a>FL_ADC_EnableSWConversion</STRONG> (Thumb, 18 bytes, Stack size 4 bytes, getsensors.o(.text.FL_ADC_EnableSWConversion))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = FL_ADC_EnableSWConversion
</UL>
<BR>[Called By]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSingleChannelSample_POLL
</UL>

<P><STRONG><a name="[169]"></a>FL_ADC_EnableSequencerChannel</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, getsensors.o(.text.FL_ADC_EnableSequencerChannel))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = FL_ADC_EnableSequencerChannel
</UL>
<BR>[Called By]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSingleChannelSample_POLL
</UL>

<P><STRONG><a name="[16d]"></a>FL_ADC_IsActiveFlag_EndOfConversion</STRONG> (Thumb, 16 bytes, Stack size 4 bytes, getsensors.o(.text.FL_ADC_IsActiveFlag_EndOfConversion))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = FL_ADC_IsActiveFlag_EndOfConversion
</UL>
<BR>[Called By]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSingleChannelSample_POLL
</UL>

<P><STRONG><a name="[16e]"></a>FL_ADC_ReadConversionData</STRONG> (Thumb, 14 bytes, Stack size 4 bytes, getsensors.o(.text.FL_ADC_ReadConversionData))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = FL_ADC_ReadConversionData
</UL>
<BR>[Called By]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSingleChannelSample_POLL
</UL>

<P><STRONG><a name="[167]"></a>FL_CMU_SetADCPrescaler</STRONG> (Thumb, 24 bytes, Stack size 4 bytes, getsensors.o(.text.FL_CMU_SetADCPrescaler))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = FL_CMU_SetADCPrescaler
</UL>
<BR>[Called By]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSingleChannelSample_POLL
</UL>

<P><STRONG><a name="[166]"></a>FL_GPIO_ResetOutputPin</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, getsensors.o(.text.FL_GPIO_ResetOutputPin))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = FL_GPIO_ResetOutputPin
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetRef
</UL>

<P><STRONG><a name="[164]"></a>FL_GPIO_SetOutputPin</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, getsensors.o(.text.FL_GPIO_SetOutputPin))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = FL_GPIO_SetOutputPin
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetRef
</UL>

<P><STRONG><a name="[165]"></a>GetSingleChannelSample_POLL</STRONG> (Thumb, 172 bytes, Stack size 40 bytes, getsensors.o(.text.GetSingleChannelSample_POLL))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = GetSingleChannelSample_POLL &rArr; FL_ADC_EnableSequencerChannel
</UL>
<BR>[Calls]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_CMU_SetADCPrescaler
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_ADC_ReadConversionData
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_ADC_IsActiveFlag_EndOfConversion
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_ADC_EnableSequencerChannel
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_ADC_EnableSWConversion
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_ADC_Enable
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_ADC_DisableSequencerChannel
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_ADC_Disable
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_ADC_ClearFlag_EndOfConversion
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetRef
</UL>

<P><STRONG><a name="[13e]"></a>FL_GPIO_ClearFlag_EXTI</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, interrupt.o(.text.FL_GPIO_ClearFlag_EXTI))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = FL_GPIO_ClearFlag_EXTI
</UL>
<BR>[Called By]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_IRQHandler
</UL>

<P><STRONG><a name="[13f]"></a>FL_GPIO_GetInputPin</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, interrupt.o(.text.FL_GPIO_GetInputPin))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = FL_GPIO_GetInputPin
</UL>
<BR>[Called By]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_IRQHandler
</UL>

<P><STRONG><a name="[13d]"></a>FL_GPIO_IsActiveFlag_EXTI</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, interrupt.o(.text.FL_GPIO_IsActiveFlag_EXTI))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = FL_GPIO_IsActiveFlag_EXTI
</UL>
<BR>[Called By]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_IRQHandler
</UL>

<P><STRONG><a name="[145]"></a>FL_GPIO_ResetOutputPin</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, interrupt.o(.text.FL_GPIO_ResetOutputPin))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = FL_GPIO_ResetOutputPin
</UL>
<BR>[Called By]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPTIM_IRQHandler
<LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_IRQHandler
</UL>

<P><STRONG><a name="[142]"></a>FL_GPIO_SetOutputPin</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, interrupt.o(.text.FL_GPIO_SetOutputPin))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = FL_GPIO_SetOutputPin
</UL>
<BR>[Called By]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPTIM_IRQHandler
<LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_IRQHandler
</UL>

<P><STRONG><a name="[1be]"></a>FL_GPIO_ToggleOutputPin</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, interrupt.o(.text.FL_GPIO_ToggleOutputPin))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = FL_GPIO_ToggleOutputPin
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_IRQHandler
</UL>

<P><STRONG><a name="[179]"></a>FL_LPTIM32_ClearFlag_Update</STRONG> (Thumb, 14 bytes, Stack size 4 bytes, interrupt.o(.text.FL_LPTIM32_ClearFlag_Update))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = FL_LPTIM32_ClearFlag_Update
</UL>
<BR>[Called By]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPTIM_IRQHandler
</UL>

<P><STRONG><a name="[141]"></a>FL_LPTIM32_Enable</STRONG> (Thumb, 18 bytes, Stack size 4 bytes, interrupt.o(.text.FL_LPTIM32_Enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = FL_LPTIM32_Enable
</UL>
<BR>[Called By]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUARTx_IRQHandler
<LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_IRQHandler
</UL>

<P><STRONG><a name="[178]"></a>FL_LPTIM32_IsActiveFlag_Update</STRONG> (Thumb, 18 bytes, Stack size 4 bytes, interrupt.o(.text.FL_LPTIM32_IsActiveFlag_Update))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = FL_LPTIM32_IsActiveFlag_Update
</UL>
<BR>[Called By]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPTIM_IRQHandler
</UL>

<P><STRONG><a name="[177]"></a>FL_LPTIM32_IsEnabledIT_Update</STRONG> (Thumb, 18 bytes, Stack size 4 bytes, interrupt.o(.text.FL_LPTIM32_IsEnabledIT_Update))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = FL_LPTIM32_IsEnabledIT_Update
</UL>
<BR>[Called By]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPTIM_IRQHandler
</UL>

<P><STRONG><a name="[17e]"></a>FL_LPUART_ClearFlag_FrameError</STRONG> (Thumb, 16 bytes, Stack size 4 bytes, interrupt.o(.text.FL_LPUART_ClearFlag_FrameError))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = FL_LPUART_ClearFlag_FrameError
</UL>
<BR>[Called By]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUARTx_IRQHandler
</UL>

<P><STRONG><a name="[17c]"></a>FL_LPUART_ClearFlag_RXBuffFull</STRONG> (Thumb, 16 bytes, Stack size 4 bytes, interrupt.o(.text.FL_LPUART_ClearFlag_RXBuffFull))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = FL_LPUART_ClearFlag_RXBuffFull
</UL>
<BR>[Called By]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUARTx_IRQHandler
</UL>

<P><STRONG><a name="[17f]"></a>FL_LPUART_ClearFlag_RXBuffOverflow</STRONG> (Thumb, 16 bytes, Stack size 4 bytes, interrupt.o(.text.FL_LPUART_ClearFlag_RXBuffOverflow))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = FL_LPUART_ClearFlag_RXBuffOverflow
</UL>
<BR>[Called By]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUARTx_IRQHandler
</UL>

<P><STRONG><a name="[180]"></a>FL_LPUART_ClearFlag_RXWakeup</STRONG> (Thumb, 16 bytes, Stack size 4 bytes, interrupt.o(.text.FL_LPUART_ClearFlag_RXWakeup))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = FL_LPUART_ClearFlag_RXWakeup
</UL>
<BR>[Called By]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUARTx_IRQHandler
</UL>

<P><STRONG><a name="[17b]"></a>FL_LPUART_IsActiveFlag_RXBuffFull</STRONG> (Thumb, 20 bytes, Stack size 4 bytes, interrupt.o(.text.FL_LPUART_IsActiveFlag_RXBuffFull))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = FL_LPUART_IsActiveFlag_RXBuffFull
</UL>
<BR>[Called By]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUARTx_IRQHandler
</UL>

<P><STRONG><a name="[17a]"></a>FL_LPUART_IsEnabledIT_RXBuffFull</STRONG> (Thumb, 20 bytes, Stack size 4 bytes, interrupt.o(.text.FL_LPUART_IsEnabledIT_RXBuffFull))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = FL_LPUART_IsEnabledIT_RXBuffFull
</UL>
<BR>[Called By]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUARTx_IRQHandler
</UL>

<P><STRONG><a name="[17d]"></a>FL_LPUART_ReadRXBuff</STRONG> (Thumb, 16 bytes, Stack size 4 bytes, interrupt.o(.text.FL_LPUART_ReadRXBuff))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = FL_LPUART_ReadRXBuff
</UL>
<BR>[Called By]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUARTx_IRQHandler
</UL>

<P><STRONG><a name="[1ba]"></a>FL_RTCA_ClearFlag_Hour</STRONG> (Thumb, 14 bytes, Stack size 4 bytes, interrupt.o(.text.FL_RTCA_ClearFlag_Hour))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = FL_RTCA_ClearFlag_Hour
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_IRQHandler
</UL>

<P><STRONG><a name="[1bd]"></a>FL_RTCA_ClearFlag_Second</STRONG> (Thumb, 14 bytes, Stack size 4 bytes, interrupt.o(.text.FL_RTCA_ClearFlag_Second))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = FL_RTCA_ClearFlag_Second
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_IRQHandler
</UL>

<P><STRONG><a name="[1b9]"></a>FL_RTCA_IsActiveFlag_Hour</STRONG> (Thumb, 18 bytes, Stack size 4 bytes, interrupt.o(.text.FL_RTCA_IsActiveFlag_Hour))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = FL_RTCA_IsActiveFlag_Hour
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_IRQHandler
</UL>

<P><STRONG><a name="[1bc]"></a>FL_RTCA_IsActiveFlag_Second</STRONG> (Thumb, 18 bytes, Stack size 4 bytes, interrupt.o(.text.FL_RTCA_IsActiveFlag_Second))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = FL_RTCA_IsActiveFlag_Second
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_IRQHandler
</UL>

<P><STRONG><a name="[1b8]"></a>FL_RTCA_IsEnabledIT_Hour</STRONG> (Thumb, 18 bytes, Stack size 4 bytes, interrupt.o(.text.FL_RTCA_IsEnabledIT_Hour))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = FL_RTCA_IsEnabledIT_Hour
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_IRQHandler
</UL>

<P><STRONG><a name="[1bb]"></a>FL_RTCA_IsEnabledIT_Second</STRONG> (Thumb, 18 bytes, Stack size 4 bytes, interrupt.o(.text.FL_RTCA_IsEnabledIT_Second))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = FL_RTCA_IsEnabledIT_Second
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_IRQHandler
</UL>

<P><STRONG><a name="[1d6]"></a>FL_GPIO_ResetOutputPin</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, rs485comm.o(.text.FL_GPIO_ResetOutputPin))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = FL_GPIO_ResetOutputPin
</UL>
<BR>[Called By]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UIDProcess
</UL>

<P><STRONG><a name="[1d4]"></a>FL_RTCA_ClearFlag_Second</STRONG> (Thumb, 14 bytes, Stack size 4 bytes, rs485comm.o(.text.FL_RTCA_ClearFlag_Second))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = FL_RTCA_ClearFlag_Second
</UL>
<BR>[Called By]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UIDProcess
</UL>

<P><STRONG><a name="[1d5]"></a>FL_RTCA_DisableIT_Second</STRONG> (Thumb, 18 bytes, Stack size 4 bytes, rs485comm.o(.text.FL_RTCA_DisableIT_Second))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = FL_RTCA_DisableIT_Second
</UL>
<BR>[Called By]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UIDProcess
</UL>

<P><STRONG><a name="[172]"></a>FL_LPUART_IsActiveFlag_TXBuffEmpty</STRONG> (Thumb, 18 bytes, Stack size 4 bytes, user_uart.o(.text.FL_LPUART_IsActiveFlag_TXBuffEmpty))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = FL_LPUART_IsActiveFlag_TXBuffEmpty
</UL>
<BR>[Called By]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit
</UL>

<P><STRONG><a name="[171]"></a>FL_LPUART_WriteTXBuff</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, user_uart.o(.text.FL_LPUART_WriteTXBuff))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = FL_LPUART_WriteTXBuff
</UL>
<BR>[Called By]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit
</UL>

<P><STRONG><a name="[1d9]"></a>FL_GPIO_GetInputPin</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, lora.o(.text.FL_GPIO_GetInputPin))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = FL_GPIO_GetInputPin
</UL>
<BR>[Called By]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Update_Lora
</UL>

<P><STRONG><a name="[1b4]"></a>FL_GPIO_ResetOutputPin</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, lora.o(.text.FL_GPIO_ResetOutputPin))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = FL_GPIO_ResetOutputPin
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModeSet
</UL>

<P><STRONG><a name="[7d]"></a>FL_GPIO_SetOutputPin</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, lora.o(.text.FL_GPIO_SetOutputPin))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = FL_GPIO_SetOutputPin
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModeSet
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigWirlessModule
</UL>

<P><STRONG><a name="[1d0]"></a>SystemPLLClockUpdate</STRONG> (Thumb, 272 bytes, Stack size 24 bytes, system_fm33lg0xx.o(.text.SystemPLLClockUpdate))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SystemPLLClockUpdate
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidiv
</UL>
<BR>[Called By]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
</UL>

<P><STRONG><a name="[ee]"></a>FL_CMU_DisableGroup3OperationClock</STRONG> (Thumb, 20 bytes, Stack size 4 bytes, fm33lg0xx_fl_lpuart.o(.text.FL_CMU_DisableGroup3OperationClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = FL_CMU_DisableGroup3OperationClock
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_LPUART_DeInit
</UL>

<P><STRONG><a name="[f1]"></a>FL_CMU_EnableGroup3BusClock</STRONG> (Thumb, 20 bytes, Stack size 4 bytes, fm33lg0xx_fl_lpuart.o(.text.FL_CMU_EnableGroup3BusClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = FL_CMU_EnableGroup3BusClock
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_LPUART_Init
</UL>

<P><STRONG><a name="[f2]"></a>FL_CMU_EnableGroup3OperationClock</STRONG> (Thumb, 20 bytes, Stack size 4 bytes, fm33lg0xx_fl_lpuart.o(.text.FL_CMU_EnableGroup3OperationClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = FL_CMU_EnableGroup3OperationClock
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_LPUART_Init
</UL>

<P><STRONG><a name="[ed]"></a>FL_CMU_IsEnabledGroup3BusClock</STRONG> (Thumb, 24 bytes, Stack size 4 bytes, fm33lg0xx_fl_lpuart.o(.text.FL_CMU_IsEnabledGroup3BusClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = FL_CMU_IsEnabledGroup3BusClock
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_LPUART_DeInit
</UL>

<P><STRONG><a name="[f7]"></a>FL_CMU_RCLF_Enable</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, fm33lg0xx_fl_lpuart.o(.text.FL_CMU_RCLF_Enable))
<BR><BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_LPUART_Init
</UL>

<P><STRONG><a name="[f6]"></a>FL_CMU_RCLF_SetPrescaler</STRONG> (Thumb, 24 bytes, Stack size 4 bytes, fm33lg0xx_fl_lpuart.o(.text.FL_CMU_RCLF_SetPrescaler))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = FL_CMU_RCLF_SetPrescaler
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_LPUART_Init
</UL>

<P><STRONG><a name="[f3]"></a>FL_CMU_SetLPUART0ClockSource</STRONG> (Thumb, 24 bytes, Stack size 4 bytes, fm33lg0xx_fl_lpuart.o(.text.FL_CMU_SetLPUART0ClockSource))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = FL_CMU_SetLPUART0ClockSource
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_LPUART_Init
</UL>

<P><STRONG><a name="[f4]"></a>FL_CMU_SetLPUART1ClockSource</STRONG> (Thumb, 24 bytes, Stack size 4 bytes, fm33lg0xx_fl_lpuart.o(.text.FL_CMU_SetLPUART1ClockSource))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = FL_CMU_SetLPUART1ClockSource
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_LPUART_Init
</UL>

<P><STRONG><a name="[f5]"></a>FL_CMU_SetLPUART2ClockSource</STRONG> (Thumb, 24 bytes, Stack size 4 bytes, fm33lg0xx_fl_lpuart.o(.text.FL_CMU_SetLPUART2ClockSource))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = FL_CMU_SetLPUART2ClockSource
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_LPUART_Init
</UL>

<P><STRONG><a name="[f8]"></a>FL_LPUART_DisableBaudRateModulation</STRONG> (Thumb, 20 bytes, Stack size 4 bytes, fm33lg0xx_fl_lpuart.o(.text.FL_LPUART_DisableBaudRateModulation))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = FL_LPUART_DisableBaudRateModulation
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_LPUART_Init
</UL>

<P><STRONG><a name="[f9]"></a>FL_LPUART_EnableBaudRateModulation</STRONG> (Thumb, 20 bytes, Stack size 4 bytes, fm33lg0xx_fl_lpuart.o(.text.FL_LPUART_EnableBaudRateModulation))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = FL_LPUART_EnableBaudRateModulation
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_LPUART_Init
</UL>

<P><STRONG><a name="[fc]"></a>FL_LPUART_EnableRX</STRONG> (Thumb, 18 bytes, Stack size 4 bytes, fm33lg0xx_fl_lpuart.o(.text.FL_LPUART_EnableRX))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = FL_LPUART_EnableRX
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_LPUART_Init
</UL>

<P><STRONG><a name="[fa]"></a>FL_LPUART_EnableTX</STRONG> (Thumb, 18 bytes, Stack size 4 bytes, fm33lg0xx_fl_lpuart.o(.text.FL_LPUART_EnableTX))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = FL_LPUART_EnableTX
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_LPUART_Init
</UL>

<P><STRONG><a name="[fd]"></a>FL_LPUART_IsEnabledRX</STRONG> (Thumb, 18 bytes, Stack size 4 bytes, fm33lg0xx_fl_lpuart.o(.text.FL_LPUART_IsEnabledRX))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = FL_LPUART_IsEnabledRX
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_LPUART_Init
</UL>

<P><STRONG><a name="[fb]"></a>FL_LPUART_IsEnabledTX</STRONG> (Thumb, 16 bytes, Stack size 4 bytes, fm33lg0xx_fl_lpuart.o(.text.FL_LPUART_IsEnabledTX))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = FL_LPUART_IsEnabledTX
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_LPUART_Init
</UL>

<P><STRONG><a name="[fe]"></a>FL_LPUART_SetBaudRate</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, fm33lg0xx_fl_lpuart.o(.text.FL_LPUART_SetBaudRate))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = FL_LPUART_SetBaudRate
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_LPUART_Init
</UL>

<P><STRONG><a name="[100]"></a>FL_LPUART_SetDataWidth</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, fm33lg0xx_fl_lpuart.o(.text.FL_LPUART_SetDataWidth))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = FL_LPUART_SetDataWidth
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_LPUART_Init
</UL>

<P><STRONG><a name="[101]"></a>FL_LPUART_SetParity</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, fm33lg0xx_fl_lpuart.o(.text.FL_LPUART_SetParity))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = FL_LPUART_SetParity
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_LPUART_Init
</UL>

<P><STRONG><a name="[ff]"></a>FL_LPUART_SetStopBitsWidth</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, fm33lg0xx_fl_lpuart.o(.text.FL_LPUART_SetStopBitsWidth))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = FL_LPUART_SetStopBitsWidth
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_LPUART_Init
</UL>

<P><STRONG><a name="[102]"></a>FL_LPUART_WriteBitModulation</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, fm33lg0xx_fl_lpuart.o(.text.FL_LPUART_WriteBitModulation))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = FL_LPUART_WriteBitModulation
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_LPUART_Init
</UL>

<P><STRONG><a name="[ef]"></a>FL_RMU_DisablePeripheralReset</STRONG> (Thumb, 16 bytes, Stack size 4 bytes, fm33lg0xx_fl_lpuart.o(.text.FL_RMU_DisablePeripheralReset))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = FL_RMU_DisablePeripheralReset
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_LPUART_DeInit
</UL>

<P><STRONG><a name="[ec]"></a>FL_RMU_DisableResetAPBPeripheral</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, fm33lg0xx_fl_lpuart.o(.text.FL_RMU_DisableResetAPBPeripheral))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = FL_RMU_DisableResetAPBPeripheral
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_LPUART_DeInit
</UL>

<P><STRONG><a name="[ea]"></a>FL_RMU_EnablePeripheralReset</STRONG> (Thumb, 16 bytes, Stack size 4 bytes, fm33lg0xx_fl_lpuart.o(.text.FL_RMU_EnablePeripheralReset))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = FL_RMU_EnablePeripheralReset
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_LPUART_DeInit
</UL>

<P><STRONG><a name="[eb]"></a>FL_RMU_EnableResetAPBPeripheral</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, fm33lg0xx_fl_lpuart.o(.text.FL_RMU_EnableResetAPBPeripheral))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = FL_RMU_EnableResetAPBPeripheral
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_LPUART_DeInit
</UL>

<P><STRONG><a name="[119]"></a>FL_CMU_EnableGroup1BusClock</STRONG> (Thumb, 20 bytes, Stack size 4 bytes, fm33lg0xx_fl_rtca.o(.text.FL_CMU_EnableGroup1BusClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = FL_CMU_EnableGroup1BusClock
</UL>
<BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_RTCA_Init
</UL>

<P><STRONG><a name="[113]"></a>FL_RTCA_WriteDay</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, fm33lg0xx_fl_rtca.o(.text.FL_RTCA_WriteDay))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = FL_RTCA_WriteDay
</UL>
<BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_RTCA_ConfigTime
</UL>

<P><STRONG><a name="[117]"></a>FL_RTCA_WriteDisable</STRONG> (Thumb, 16 bytes, Stack size 4 bytes, fm33lg0xx_fl_rtca.o(.text.FL_RTCA_WriteDisable))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = FL_RTCA_WriteDisable
</UL>
<BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_RTCA_ConfigTime
</UL>

<P><STRONG><a name="[10f]"></a>FL_RTCA_WriteEnable</STRONG> (Thumb, 16 bytes, Stack size 4 bytes, fm33lg0xx_fl_rtca.o(.text.FL_RTCA_WriteEnable))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = FL_RTCA_WriteEnable
</UL>
<BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_RTCA_ConfigTime
</UL>

<P><STRONG><a name="[112]"></a>FL_RTCA_WriteHour</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, fm33lg0xx_fl_rtca.o(.text.FL_RTCA_WriteHour))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = FL_RTCA_WriteHour
</UL>
<BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_RTCA_ConfigTime
</UL>

<P><STRONG><a name="[111]"></a>FL_RTCA_WriteMinute</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, fm33lg0xx_fl_rtca.o(.text.FL_RTCA_WriteMinute))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = FL_RTCA_WriteMinute
</UL>
<BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_RTCA_ConfigTime
</UL>

<P><STRONG><a name="[115]"></a>FL_RTCA_WriteMonth</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, fm33lg0xx_fl_rtca.o(.text.FL_RTCA_WriteMonth))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = FL_RTCA_WriteMonth
</UL>
<BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_RTCA_ConfigTime
</UL>

<P><STRONG><a name="[110]"></a>FL_RTCA_WriteSecond</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, fm33lg0xx_fl_rtca.o(.text.FL_RTCA_WriteSecond))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = FL_RTCA_WriteSecond
</UL>
<BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_RTCA_ConfigTime
</UL>

<P><STRONG><a name="[114]"></a>FL_RTCA_WriteWeek</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, fm33lg0xx_fl_rtca.o(.text.FL_RTCA_WriteWeek))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = FL_RTCA_WriteWeek
</UL>
<BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_RTCA_ConfigTime
</UL>

<P><STRONG><a name="[116]"></a>FL_RTCA_WriteYear</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, fm33lg0xx_fl_rtca.o(.text.FL_RTCA_WriteYear))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = FL_RTCA_WriteYear
</UL>
<BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_RTCA_ConfigTime
</UL>

<P><STRONG><a name="[c7]"></a>FL_CMU_EnableGroup1BusClock</STRONG> (Thumb, 20 bytes, Stack size 4 bytes, fm33lg0xx_fl_exti.o(.text.FL_CMU_EnableGroup1BusClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = FL_CMU_EnableGroup1BusClock
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_EXTI_CommonInit
</UL>

<P><STRONG><a name="[c8]"></a>FL_CMU_EnableGroup3OperationClock</STRONG> (Thumb, 20 bytes, Stack size 4 bytes, fm33lg0xx_fl_exti.o(.text.FL_CMU_EnableGroup3OperationClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = FL_CMU_EnableGroup3OperationClock
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_EXTI_CommonInit
</UL>

<P><STRONG><a name="[c9]"></a>FL_CMU_SetEXTIClockSource</STRONG> (Thumb, 24 bytes, Stack size 4 bytes, fm33lg0xx_fl_exti.o(.text.FL_CMU_SetEXTIClockSource))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = FL_CMU_SetEXTIClockSource
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_EXTI_CommonInit
</UL>

<P><STRONG><a name="[cd]"></a>FL_GPIO_ClearFlag_EXTI</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, fm33lg0xx_fl_exti.o(.text.FL_GPIO_ClearFlag_EXTI))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = FL_GPIO_ClearFlag_EXTI
</UL>
<BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_EXTI_Init
</UL>

<P><STRONG><a name="[cc]"></a>FL_GPIO_DisableDigitalFilter</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, fm33lg0xx_fl_exti.o(.text.FL_GPIO_DisableDigitalFilter))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = FL_GPIO_DisableDigitalFilter
</UL>
<BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_EXTI_Init
</UL>

<P><STRONG><a name="[cb]"></a>FL_GPIO_EnableDigitalFilter</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, fm33lg0xx_fl_exti.o(.text.FL_GPIO_EnableDigitalFilter))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = FL_GPIO_EnableDigitalFilter
</UL>
<BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_EXTI_Init
</UL>

<P><STRONG><a name="[28]"></a>FL_GPIO_SetExtiLine0</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, fm33lg0xx_fl_exti.o(.text.FL_GPIO_SetExtiLine0))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = FL_GPIO_SetExtiLine0
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fm33lg0xx_fl_exti.o(.rodata.setExtiLineFuncs)
</UL>
<P><STRONG><a name="[29]"></a>FL_GPIO_SetExtiLine1</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, fm33lg0xx_fl_exti.o(.text.FL_GPIO_SetExtiLine1))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = FL_GPIO_SetExtiLine1
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fm33lg0xx_fl_exti.o(.rodata.setExtiLineFuncs)
</UL>
<P><STRONG><a name="[32]"></a>FL_GPIO_SetExtiLine10</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, fm33lg0xx_fl_exti.o(.text.FL_GPIO_SetExtiLine10))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = FL_GPIO_SetExtiLine10
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fm33lg0xx_fl_exti.o(.rodata.setExtiLineFuncs)
</UL>
<P><STRONG><a name="[33]"></a>FL_GPIO_SetExtiLine11</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, fm33lg0xx_fl_exti.o(.text.FL_GPIO_SetExtiLine11))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = FL_GPIO_SetExtiLine11
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fm33lg0xx_fl_exti.o(.rodata.setExtiLineFuncs)
</UL>
<P><STRONG><a name="[34]"></a>FL_GPIO_SetExtiLine12</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, fm33lg0xx_fl_exti.o(.text.FL_GPIO_SetExtiLine12))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = FL_GPIO_SetExtiLine12
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fm33lg0xx_fl_exti.o(.rodata.setExtiLineFuncs)
</UL>
<P><STRONG><a name="[35]"></a>FL_GPIO_SetExtiLine13</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, fm33lg0xx_fl_exti.o(.text.FL_GPIO_SetExtiLine13))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = FL_GPIO_SetExtiLine13
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fm33lg0xx_fl_exti.o(.rodata.setExtiLineFuncs)
</UL>
<P><STRONG><a name="[36]"></a>FL_GPIO_SetExtiLine14</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, fm33lg0xx_fl_exti.o(.text.FL_GPIO_SetExtiLine14))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = FL_GPIO_SetExtiLine14
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fm33lg0xx_fl_exti.o(.rodata.setExtiLineFuncs)
</UL>
<P><STRONG><a name="[37]"></a>FL_GPIO_SetExtiLine15</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, fm33lg0xx_fl_exti.o(.text.FL_GPIO_SetExtiLine15))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = FL_GPIO_SetExtiLine15
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fm33lg0xx_fl_exti.o(.rodata.setExtiLineFuncs)
</UL>
<P><STRONG><a name="[38]"></a>FL_GPIO_SetExtiLine16</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, fm33lg0xx_fl_exti.o(.text.FL_GPIO_SetExtiLine16))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = FL_GPIO_SetExtiLine16
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fm33lg0xx_fl_exti.o(.rodata.setExtiLineFuncs)
</UL>
<P><STRONG><a name="[39]"></a>FL_GPIO_SetExtiLine17</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, fm33lg0xx_fl_exti.o(.text.FL_GPIO_SetExtiLine17))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = FL_GPIO_SetExtiLine17
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fm33lg0xx_fl_exti.o(.rodata.setExtiLineFuncs)
</UL>
<P><STRONG><a name="[3a]"></a>FL_GPIO_SetExtiLine18</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, fm33lg0xx_fl_exti.o(.text.FL_GPIO_SetExtiLine18))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = FL_GPIO_SetExtiLine18
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fm33lg0xx_fl_exti.o(.rodata.setExtiLineFuncs)
</UL>
<P><STRONG><a name="[2a]"></a>FL_GPIO_SetExtiLine2</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, fm33lg0xx_fl_exti.o(.text.FL_GPIO_SetExtiLine2))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = FL_GPIO_SetExtiLine2
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fm33lg0xx_fl_exti.o(.rodata.setExtiLineFuncs)
</UL>
<P><STRONG><a name="[2b]"></a>FL_GPIO_SetExtiLine3</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, fm33lg0xx_fl_exti.o(.text.FL_GPIO_SetExtiLine3))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = FL_GPIO_SetExtiLine3
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fm33lg0xx_fl_exti.o(.rodata.setExtiLineFuncs)
</UL>
<P><STRONG><a name="[2c]"></a>FL_GPIO_SetExtiLine4</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, fm33lg0xx_fl_exti.o(.text.FL_GPIO_SetExtiLine4))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = FL_GPIO_SetExtiLine4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fm33lg0xx_fl_exti.o(.rodata.setExtiLineFuncs)
</UL>
<P><STRONG><a name="[2d]"></a>FL_GPIO_SetExtiLine5</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, fm33lg0xx_fl_exti.o(.text.FL_GPIO_SetExtiLine5))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = FL_GPIO_SetExtiLine5
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fm33lg0xx_fl_exti.o(.rodata.setExtiLineFuncs)
</UL>
<P><STRONG><a name="[2e]"></a>FL_GPIO_SetExtiLine6</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, fm33lg0xx_fl_exti.o(.text.FL_GPIO_SetExtiLine6))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = FL_GPIO_SetExtiLine6
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fm33lg0xx_fl_exti.o(.rodata.setExtiLineFuncs)
</UL>
<P><STRONG><a name="[2f]"></a>FL_GPIO_SetExtiLine7</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, fm33lg0xx_fl_exti.o(.text.FL_GPIO_SetExtiLine7))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = FL_GPIO_SetExtiLine7
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fm33lg0xx_fl_exti.o(.rodata.setExtiLineFuncs)
</UL>
<P><STRONG><a name="[30]"></a>FL_GPIO_SetExtiLine8</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, fm33lg0xx_fl_exti.o(.text.FL_GPIO_SetExtiLine8))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = FL_GPIO_SetExtiLine8
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fm33lg0xx_fl_exti.o(.rodata.setExtiLineFuncs)
</UL>
<P><STRONG><a name="[31]"></a>FL_GPIO_SetExtiLine9</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, fm33lg0xx_fl_exti.o(.text.FL_GPIO_SetExtiLine9))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = FL_GPIO_SetExtiLine9
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fm33lg0xx_fl_exti.o(.rodata.setExtiLineFuncs)
</UL>
<P><STRONG><a name="[3b]"></a>FL_GPIO_SetTriggerEdge0</STRONG> (Thumb, 36 bytes, Stack size 12 bytes, fm33lg0xx_fl_exti.o(.text.FL_GPIO_SetTriggerEdge0))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = FL_GPIO_SetTriggerEdge0
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fm33lg0xx_fl_exti.o(.rodata.setTrigEdgeFuncs)
</UL>
<P><STRONG><a name="[3c]"></a>FL_GPIO_SetTriggerEdge1</STRONG> (Thumb, 38 bytes, Stack size 12 bytes, fm33lg0xx_fl_exti.o(.text.FL_GPIO_SetTriggerEdge1))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = FL_GPIO_SetTriggerEdge1
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fm33lg0xx_fl_exti.o(.rodata.setTrigEdgeFuncs)
</UL>
<P><STRONG><a name="[ce]"></a>NVIC_ClearPendingIRQ</STRONG> (Thumb, 40 bytes, Stack size 4 bytes, fm33lg0xx_fl_exti.o(.text.NVIC_ClearPendingIRQ))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = NVIC_ClearPendingIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_EXTI_Init
</UL>

<P><STRONG><a name="[b2]"></a>FL_ADC_ClearFlag_EndOfCalibration</STRONG> (Thumb, 14 bytes, Stack size 4 bytes, fm33lg0xx_fl_adc.o(.text.FL_ADC_ClearFlag_EndOfCalibration))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = FL_ADC_ClearFlag_EndOfCalibration
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_ADC_Init
</UL>

<P><STRONG><a name="[ad]"></a>FL_ADC_Disable</STRONG> (Thumb, 18 bytes, Stack size 4 bytes, fm33lg0xx_fl_adc.o(.text.FL_ADC_Disable))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = FL_ADC_Disable
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_ADC_Init
</UL>

<P><STRONG><a name="[bb]"></a>FL_ADC_DisableExternalConversion</STRONG> (Thumb, 18 bytes, Stack size 4 bytes, fm33lg0xx_fl_adc.o(.text.FL_ADC_DisableExternalConversion))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = FL_ADC_DisableExternalConversion
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_ADC_Init
</UL>

<P><STRONG><a name="[ae]"></a>FL_ADC_DisableOverSampling</STRONG> (Thumb, 20 bytes, Stack size 4 bytes, fm33lg0xx_fl_adc.o(.text.FL_ADC_DisableOverSampling))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = FL_ADC_DisableOverSampling
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_ADC_Init
</UL>

<P><STRONG><a name="[b9]"></a>FL_ADC_DisableOverrunMode</STRONG> (Thumb, 20 bytes, Stack size 4 bytes, fm33lg0xx_fl_adc.o(.text.FL_ADC_DisableOverrunMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = FL_ADC_DisableOverrunMode
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_ADC_Init
</UL>

<P><STRONG><a name="[b7]"></a>FL_ADC_DisableWaitMode</STRONG> (Thumb, 20 bytes, Stack size 4 bytes, fm33lg0xx_fl_adc.o(.text.FL_ADC_DisableWaitMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = FL_ADC_DisableWaitMode
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_ADC_Init
</UL>

<P><STRONG><a name="[af]"></a>FL_ADC_Enable</STRONG> (Thumb, 18 bytes, Stack size 4 bytes, fm33lg0xx_fl_adc.o(.text.FL_ADC_Enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = FL_ADC_Enable
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_ADC_Init
</UL>

<P><STRONG><a name="[b0]"></a>FL_ADC_EnableCalibration</STRONG> (Thumb, 18 bytes, Stack size 4 bytes, fm33lg0xx_fl_adc.o(.text.FL_ADC_EnableCalibration))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = FL_ADC_EnableCalibration
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_ADC_Init
</UL>

<P><STRONG><a name="[c2]"></a>FL_ADC_EnableOverSampling</STRONG> (Thumb, 20 bytes, Stack size 4 bytes, fm33lg0xx_fl_adc.o(.text.FL_ADC_EnableOverSampling))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = FL_ADC_EnableOverSampling
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_ADC_Init
</UL>

<P><STRONG><a name="[b8]"></a>FL_ADC_EnableOverrunMode</STRONG> (Thumb, 20 bytes, Stack size 4 bytes, fm33lg0xx_fl_adc.o(.text.FL_ADC_EnableOverrunMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = FL_ADC_EnableOverrunMode
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_ADC_Init
</UL>

<P><STRONG><a name="[b6]"></a>FL_ADC_EnableWaitMode</STRONG> (Thumb, 20 bytes, Stack size 4 bytes, fm33lg0xx_fl_adc.o(.text.FL_ADC_EnableWaitMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = FL_ADC_EnableWaitMode
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_ADC_Init
</UL>

<P><STRONG><a name="[b1]"></a>FL_ADC_IsActiveFlag_EndOfCalibration</STRONG> (Thumb, 18 bytes, Stack size 4 bytes, fm33lg0xx_fl_adc.o(.text.FL_ADC_IsActiveFlag_EndOfCalibration))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = FL_ADC_IsActiveFlag_EndOfCalibration
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_ADC_Init
</UL>

<P><STRONG><a name="[b3]"></a>FL_ADC_IsEnabled</STRONG> (Thumb, 16 bytes, Stack size 4 bytes, fm33lg0xx_fl_adc.o(.text.FL_ADC_IsEnabled))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = FL_ADC_IsEnabled
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_ADC_Init
</UL>

<P><STRONG><a name="[9c]"></a>FL_ADC_SetAPBPrescaler</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, fm33lg0xx_fl_adc.o(.text.FL_ADC_SetAPBPrescaler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = FL_ADC_SetAPBPrescaler
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_ADC_CommonInit
</UL>

<P><STRONG><a name="[a1]"></a>FL_ADC_SetBitWidth</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, fm33lg0xx_fl_adc.o(.text.FL_ADC_SetBitWidth))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = FL_ADC_SetBitWidth
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_ADC_CommonInit
</UL>

<P><STRONG><a name="[9b]"></a>FL_ADC_SetClockSource</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, fm33lg0xx_fl_adc.o(.text.FL_ADC_SetClockSource))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = FL_ADC_SetClockSource
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_ADC_CommonInit
</UL>

<P><STRONG><a name="[b4]"></a>FL_ADC_SetConversionMode</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, fm33lg0xx_fl_adc.o(.text.FL_ADC_SetConversionMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = FL_ADC_SetConversionMode
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_ADC_Init
</UL>

<P><STRONG><a name="[be]"></a>FL_ADC_SetFastChannelSamplingTime</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, fm33lg0xx_fl_adc.o(.text.FL_ADC_SetFastChannelSamplingTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = FL_ADC_SetFastChannelSamplingTime
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_ADC_Init
</UL>

<P><STRONG><a name="[c0]"></a>FL_ADC_SetOverSamplingMultiplier</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, fm33lg0xx_fl_adc.o(.text.FL_ADC_SetOverSamplingMultiplier))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = FL_ADC_SetOverSamplingMultiplier
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_ADC_Init
</UL>

<P><STRONG><a name="[c1]"></a>FL_ADC_SetOverSamplingShift</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, fm33lg0xx_fl_adc.o(.text.FL_ADC_SetOverSamplingShift))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = FL_ADC_SetOverSamplingShift
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_ADC_Init
</UL>

<P><STRONG><a name="[a0]"></a>FL_ADC_SetReferenceSource</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, fm33lg0xx_fl_adc.o(.text.FL_ADC_SetReferenceSource))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = FL_ADC_SetReferenceSource
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_ADC_CommonInit
</UL>

<P><STRONG><a name="[ba]"></a>FL_ADC_SetSequenceScanDirection</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, fm33lg0xx_fl_adc.o(.text.FL_ADC_SetSequenceScanDirection))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = FL_ADC_SetSequenceScanDirection
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_ADC_Init
</UL>

<P><STRONG><a name="[b5]"></a>FL_ADC_SetSingleConversionAutoMode</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, fm33lg0xx_fl_adc.o(.text.FL_ADC_SetSingleConversionAutoMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = FL_ADC_SetSingleConversionAutoMode
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_ADC_Init
</UL>

<P><STRONG><a name="[bf]"></a>FL_ADC_SetSlowChannelSamplingTime</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, fm33lg0xx_fl_adc.o(.text.FL_ADC_SetSlowChannelSamplingTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = FL_ADC_SetSlowChannelSamplingTime
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_ADC_Init
</UL>

<P><STRONG><a name="[bc]"></a>FL_ADC_SetTriggerEdge</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, fm33lg0xx_fl_adc.o(.text.FL_ADC_SetTriggerEdge))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = FL_ADC_SetTriggerEdge
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_ADC_Init
</UL>

<P><STRONG><a name="[bd]"></a>FL_ADC_SetTriggerSource</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, fm33lg0xx_fl_adc.o(.text.FL_ADC_SetTriggerSource))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = FL_ADC_SetTriggerSource
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_ADC_Init
</UL>

<P><STRONG><a name="[a7]"></a>FL_CMU_EnableGroup1BusClock</STRONG> (Thumb, 20 bytes, Stack size 4 bytes, fm33lg0xx_fl_adc.o(.text.FL_CMU_EnableGroup1BusClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = FL_CMU_EnableGroup1BusClock
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_ADC_Init
</UL>

<P><STRONG><a name="[9a]"></a>FL_CMU_EnableGroup2BusClock</STRONG> (Thumb, 20 bytes, Stack size 4 bytes, fm33lg0xx_fl_adc.o(.text.FL_CMU_EnableGroup2BusClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = FL_CMU_EnableGroup2BusClock
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_ADC_CommonInit
</UL>

<P><STRONG><a name="[9f]"></a>FL_CMU_EnableGroup3OperationClock</STRONG> (Thumb, 20 bytes, Stack size 4 bytes, fm33lg0xx_fl_adc.o(.text.FL_CMU_EnableGroup3OperationClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = FL_CMU_EnableGroup3OperationClock
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_ADC_CommonInit
</UL>

<P><STRONG><a name="[9d]"></a>FL_CMU_SetADCClockSource</STRONG> (Thumb, 24 bytes, Stack size 4 bytes, fm33lg0xx_fl_adc.o(.text.FL_CMU_SetADCClockSource))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = FL_CMU_SetADCClockSource
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_ADC_CommonInit
</UL>

<P><STRONG><a name="[9e]"></a>FL_CMU_SetADCPrescaler</STRONG> (Thumb, 24 bytes, Stack size 4 bytes, fm33lg0xx_fl_adc.o(.text.FL_CMU_SetADCPrescaler))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = FL_CMU_SetADCPrescaler
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_ADC_CommonInit
</UL>

<P><STRONG><a name="[a5]"></a>FL_RMU_DisablePeripheralReset</STRONG> (Thumb, 16 bytes, Stack size 4 bytes, fm33lg0xx_fl_adc.o(.text.FL_RMU_DisablePeripheralReset))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = FL_RMU_DisablePeripheralReset
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_ADC_DeInit
</UL>

<P><STRONG><a name="[a4]"></a>FL_RMU_DisableResetAPBPeripheral</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, fm33lg0xx_fl_adc.o(.text.FL_RMU_DisableResetAPBPeripheral))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = FL_RMU_DisableResetAPBPeripheral
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_ADC_DeInit
</UL>

<P><STRONG><a name="[a2]"></a>FL_RMU_EnablePeripheralReset</STRONG> (Thumb, 16 bytes, Stack size 4 bytes, fm33lg0xx_fl_adc.o(.text.FL_RMU_EnablePeripheralReset))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = FL_RMU_EnablePeripheralReset
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_ADC_DeInit
</UL>

<P><STRONG><a name="[a3]"></a>FL_RMU_EnableResetAPBPeripheral</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, fm33lg0xx_fl_adc.o(.text.FL_RMU_EnableResetAPBPeripheral))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = FL_RMU_EnableResetAPBPeripheral
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_ADC_DeInit
</UL>

<P><STRONG><a name="[a9]"></a>FL_VREF_ClearFlag_Ready</STRONG> (Thumb, 14 bytes, Stack size 4 bytes, fm33lg0xx_fl_adc.o(.text.FL_VREF_ClearFlag_Ready))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = FL_VREF_ClearFlag_Ready
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_ADC_Init
</UL>

<P><STRONG><a name="[aa]"></a>FL_VREF_Enable</STRONG> (Thumb, 18 bytes, Stack size 4 bytes, fm33lg0xx_fl_adc.o(.text.FL_VREF_Enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = FL_VREF_Enable
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_ADC_Init
</UL>

<P><STRONG><a name="[ab]"></a>FL_VREF_EnableTemperatureSensor</STRONG> (Thumb, 18 bytes, Stack size 4 bytes, fm33lg0xx_fl_adc.o(.text.FL_VREF_EnableTemperatureSensor))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = FL_VREF_EnableTemperatureSensor
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_ADC_Init
</UL>

<P><STRONG><a name="[ac]"></a>FL_VREF_IsActiveFlag_Ready</STRONG> (Thumb, 16 bytes, Stack size 4 bytes, fm33lg0xx_fl_adc.o(.text.FL_VREF_IsActiveFlag_Ready))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = FL_VREF_IsActiveFlag_Ready
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_ADC_Init
</UL>

<P><STRONG><a name="[a8]"></a>FL_VREF_IsEnabled</STRONG> (Thumb, 16 bytes, Stack size 4 bytes, fm33lg0xx_fl_adc.o(.text.FL_VREF_IsEnabled))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = FL_VREF_IsEnabled
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_ADC_Init
</UL>

<P><STRONG><a name="[11d]"></a>FL_CMU_DisableGroup3BusClock</STRONG> (Thumb, 20 bytes, Stack size 4 bytes, fm33lg0xx_fl_spi.o(.text.FL_CMU_DisableGroup3BusClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = FL_CMU_DisableGroup3BusClock
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_SPI_DeInit
</UL>

<P><STRONG><a name="[120]"></a>FL_CMU_EnableGroup3BusClock</STRONG> (Thumb, 20 bytes, Stack size 4 bytes, fm33lg0xx_fl_spi.o(.text.FL_CMU_EnableGroup3BusClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = FL_CMU_EnableGroup3BusClock
</UL>
<BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_SPI_Init
</UL>

<P><STRONG><a name="[11e]"></a>FL_RMU_DisablePeripheralReset</STRONG> (Thumb, 16 bytes, Stack size 4 bytes, fm33lg0xx_fl_spi.o(.text.FL_RMU_DisablePeripheralReset))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = FL_RMU_DisablePeripheralReset
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_SPI_DeInit
</UL>

<P><STRONG><a name="[11c]"></a>FL_RMU_DisableResetAPBPeripheral</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, fm33lg0xx_fl_spi.o(.text.FL_RMU_DisableResetAPBPeripheral))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = FL_RMU_DisableResetAPBPeripheral
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_SPI_DeInit
</UL>

<P><STRONG><a name="[11a]"></a>FL_RMU_EnablePeripheralReset</STRONG> (Thumb, 16 bytes, Stack size 4 bytes, fm33lg0xx_fl_spi.o(.text.FL_RMU_EnablePeripheralReset))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = FL_RMU_EnablePeripheralReset
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_SPI_DeInit
</UL>

<P><STRONG><a name="[11b]"></a>FL_RMU_EnableResetAPBPeripheral</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, fm33lg0xx_fl_spi.o(.text.FL_RMU_EnableResetAPBPeripheral))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = FL_RMU_EnableResetAPBPeripheral
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_SPI_DeInit
</UL>

<P><STRONG><a name="[122]"></a>FL_SPI_DisableSSNSoftControl</STRONG> (Thumb, 18 bytes, Stack size 4 bytes, fm33lg0xx_fl_spi.o(.text.FL_SPI_DisableSSNSoftControl))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = FL_SPI_DisableSSNSoftControl
</UL>
<BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_SPI_Init
</UL>

<P><STRONG><a name="[12a]"></a>FL_SPI_Enable</STRONG> (Thumb, 18 bytes, Stack size 4 bytes, fm33lg0xx_fl_spi.o(.text.FL_SPI_Enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = FL_SPI_Enable
</UL>
<BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_SPI_Init
</UL>

<P><STRONG><a name="[121]"></a>FL_SPI_EnableSSNSoftControl</STRONG> (Thumb, 18 bytes, Stack size 4 bytes, fm33lg0xx_fl_spi.o(.text.FL_SPI_EnableSSNSoftControl))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = FL_SPI_EnableSSNSoftControl
</UL>
<BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_SPI_Init
</UL>

<P><STRONG><a name="[125]"></a>FL_SPI_SetBitOrder</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, fm33lg0xx_fl_spi.o(.text.FL_SPI_SetBitOrder))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = FL_SPI_SetBitOrder
</UL>
<BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_SPI_Init
</UL>

<P><STRONG><a name="[124]"></a>FL_SPI_SetClockDivision</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, fm33lg0xx_fl_spi.o(.text.FL_SPI_SetClockDivision))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = FL_SPI_SetClockDivision
</UL>
<BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_SPI_Init
</UL>

<P><STRONG><a name="[127]"></a>FL_SPI_SetClockPhase</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, fm33lg0xx_fl_spi.o(.text.FL_SPI_SetClockPhase))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = FL_SPI_SetClockPhase
</UL>
<BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_SPI_Init
</UL>

<P><STRONG><a name="[129]"></a>FL_SPI_SetClockPolarity</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, fm33lg0xx_fl_spi.o(.text.FL_SPI_SetClockPolarity))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = FL_SPI_SetClockPolarity
</UL>
<BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_SPI_Init
</UL>

<P><STRONG><a name="[126]"></a>FL_SPI_SetDataWidth</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, fm33lg0xx_fl_spi.o(.text.FL_SPI_SetDataWidth))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = FL_SPI_SetDataWidth
</UL>
<BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_SPI_Init
</UL>

<P><STRONG><a name="[128]"></a>FL_SPI_SetTransferMode</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, fm33lg0xx_fl_spi.o(.text.FL_SPI_SetTransferMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = FL_SPI_SetTransferMode
</UL>
<BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_SPI_Init
</UL>

<P><STRONG><a name="[123]"></a>FL_SPI_SetWorkMode</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, fm33lg0xx_fl_spi.o(.text.FL_SPI_SetWorkMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = FL_SPI_SetWorkMode
</UL>
<BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_SPI_Init
</UL>

<P><STRONG><a name="[12d]"></a>FL_CDIF_EnableCPUToVAO</STRONG> (Thumb, 18 bytes, Stack size 4 bytes, fm33lg0xx_fl_vao.o(.text.FL_CDIF_EnableCPUToVAO))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = FL_CDIF_EnableCPUToVAO
</UL>
<BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_VAO_XTLF_Init
</UL>

<P><STRONG><a name="[12c]"></a>FL_CDIF_EnableVAOToCPU</STRONG> (Thumb, 18 bytes, Stack size 4 bytes, fm33lg0xx_fl_vao.o(.text.FL_CDIF_EnableVAOToCPU))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = FL_CDIF_EnableVAOToCPU
</UL>
<BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_VAO_XTLF_Init
</UL>

<P><STRONG><a name="[12f]"></a>FL_VAO_XTLF_SetDriveLevel</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, fm33lg0xx_fl_vao.o(.text.FL_VAO_XTLF_SetDriveLevel))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = FL_VAO_XTLF_SetDriveLevel
</UL>
<BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_VAO_XTLF_Init
</UL>

<P><STRONG><a name="[12e]"></a>FL_VAO_XTLF_SetWorkCurrent</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, fm33lg0xx_fl_vao.o(.text.FL_VAO_XTLF_SetWorkCurrent))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = FL_VAO_XTLF_SetWorkCurrent
</UL>
<BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_VAO_XTLF_Init
</UL>

<P><STRONG><a name="[104]"></a>NVIC_DisableIRQ</STRONG> (Thumb, 40 bytes, Stack size 4 bytes, fm33lg0xx_fl.o(.text.NVIC_DisableIRQ))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = NVIC_DisableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_NVIC_Init
</UL>

<P><STRONG><a name="[106]"></a>NVIC_EnableIRQ</STRONG> (Thumb, 40 bytes, Stack size 4 bytes, fm33lg0xx_fl.o(.text.NVIC_EnableIRQ))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_NVIC_Init
</UL>

<P><STRONG><a name="[105]"></a>NVIC_SetPriority</STRONG> (Thumb, 128 bytes, Stack size 24 bytes, fm33lg0xx_fl.o(.text.NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_NVIC_Init
</UL>

<P><STRONG><a name="[10b]"></a>FL_PMU_DisableCoreVoltageScaling</STRONG> (Thumb, 20 bytes, Stack size 4 bytes, fm33lg0xx_fl_pmu.o(.text.FL_PMU_DisableCoreVoltageScaling))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = FL_PMU_DisableCoreVoltageScaling
</UL>
<BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_PMU_Sleep_Init
</UL>

<P><STRONG><a name="[10a]"></a>FL_PMU_EnableCoreVoltageScaling</STRONG> (Thumb, 20 bytes, Stack size 4 bytes, fm33lg0xx_fl_pmu.o(.text.FL_PMU_EnableCoreVoltageScaling))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = FL_PMU_EnableCoreVoltageScaling
</UL>
<BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_PMU_Sleep_Init
</UL>

<P><STRONG><a name="[10c]"></a>FL_PMU_SetLDOLowPowerMode</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, fm33lg0xx_fl_pmu.o(.text.FL_PMU_SetLDOLowPowerMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = FL_PMU_SetLDOLowPowerMode
</UL>
<BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_PMU_Sleep_Init
</UL>

<P><STRONG><a name="[109]"></a>FL_PMU_SetRCHFWakeupFrequency</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, fm33lg0xx_fl_pmu.o(.text.FL_PMU_SetRCHFWakeupFrequency))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = FL_PMU_SetRCHFWakeupFrequency
</UL>
<BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_PMU_Sleep_Init
</UL>

<P><STRONG><a name="[10d]"></a>FL_PMU_SetSleepMode</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, fm33lg0xx_fl_pmu.o(.text.FL_PMU_SetSleepMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = FL_PMU_SetSleepMode
</UL>
<BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_PMU_Sleep_Init
</UL>

<P><STRONG><a name="[108]"></a>FL_PMU_SetWakeupDelay</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, fm33lg0xx_fl_pmu.o(.text.FL_PMU_SetWakeupDelay))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = FL_PMU_SetWakeupDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_PMU_Sleep_Init
</UL>

<P><STRONG><a name="[df]"></a>FL_CMU_EnableGroup1BusClock</STRONG> (Thumb, 20 bytes, Stack size 4 bytes, fm33lg0xx_fl_lptim32.o(.text.FL_CMU_EnableGroup1BusClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = FL_CMU_EnableGroup1BusClock
</UL>
<BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_LPTIM32_Init
</UL>

<P><STRONG><a name="[e0]"></a>FL_CMU_EnableGroup3OperationClock</STRONG> (Thumb, 20 bytes, Stack size 4 bytes, fm33lg0xx_fl_lptim32.o(.text.FL_CMU_EnableGroup3OperationClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = FL_CMU_EnableGroup3OperationClock
</UL>
<BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_LPTIM32_Init
</UL>

<P><STRONG><a name="[e1]"></a>FL_CMU_SetLPTIM32ClockSource</STRONG> (Thumb, 24 bytes, Stack size 4 bytes, fm33lg0xx_fl_lptim32.o(.text.FL_CMU_SetLPTIM32ClockSource))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = FL_CMU_SetLPTIM32ClockSource
</UL>
<BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_LPTIM32_Init
</UL>

<P><STRONG><a name="[e6]"></a>FL_LPTIM32_EnableETRFilter</STRONG> (Thumb, 20 bytes, Stack size 4 bytes, fm33lg0xx_fl_lptim32.o(.text.FL_LPTIM32_EnableETRFilter))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = FL_LPTIM32_EnableETRFilter
</UL>
<BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_LPTIM32_Init
</UL>

<P><STRONG><a name="[e2]"></a>FL_LPTIM32_SetClockSource</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, fm33lg0xx_fl_lptim32.o(.text.FL_LPTIM32_SetClockSource))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = FL_LPTIM32_SetClockSource
</UL>
<BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_LPTIM32_Init
</UL>

<P><STRONG><a name="[e5]"></a>FL_LPTIM32_SetETRCountEdge</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, fm33lg0xx_fl_lptim32.o(.text.FL_LPTIM32_SetETRCountEdge))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = FL_LPTIM32_SetETRCountEdge
</UL>
<BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_LPTIM32_Init
</UL>

<P><STRONG><a name="[e7]"></a>FL_LPTIM32_SetETRTriggerEdge</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, fm33lg0xx_fl_lptim32.o(.text.FL_LPTIM32_SetETRTriggerEdge))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = FL_LPTIM32_SetETRTriggerEdge
</UL>
<BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_LPTIM32_Init
</UL>

<P><STRONG><a name="[e8]"></a>FL_LPTIM32_SetOnePulseMode</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, fm33lg0xx_fl_lptim32.o(.text.FL_LPTIM32_SetOnePulseMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = FL_LPTIM32_SetOnePulseMode
</UL>
<BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_LPTIM32_Init
</UL>

<P><STRONG><a name="[e4]"></a>FL_LPTIM32_SetOperationMode</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, fm33lg0xx_fl_lptim32.o(.text.FL_LPTIM32_SetOperationMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = FL_LPTIM32_SetOperationMode
</UL>
<BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_LPTIM32_Init
</UL>

<P><STRONG><a name="[e3]"></a>FL_LPTIM32_SetPrescaler</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, fm33lg0xx_fl_lptim32.o(.text.FL_LPTIM32_SetPrescaler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = FL_LPTIM32_SetPrescaler
</UL>
<BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_LPTIM32_Init
</UL>

<P><STRONG><a name="[e9]"></a>FL_LPTIM32_WriteAutoReload</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, fm33lg0xx_fl_lptim32.o(.text.FL_LPTIM32_WriteAutoReload))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = FL_LPTIM32_WriteAutoReload
</UL>
<BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_LPTIM32_Init
</UL>

<P><STRONG><a name="[d0]"></a>FL_CMU_EnableGroup1BusClock</STRONG> (Thumb, 20 bytes, Stack size 4 bytes, fm33lg0xx_fl_gpio.o(.text.FL_CMU_EnableGroup1BusClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = FL_CMU_EnableGroup1BusClock
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_GPIO_Init
</UL>

<P><STRONG><a name="[d5]"></a>FL_GPIO_DisablePinAnalogSwitch</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, fm33lg0xx_fl_gpio.o(.text.FL_GPIO_DisablePinAnalogSwitch))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = FL_GPIO_DisablePinAnalogSwitch
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_GPIO_Init
</UL>

<P><STRONG><a name="[d1]"></a>FL_GPIO_DisablePinInput</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, fm33lg0xx_fl_gpio.o(.text.FL_GPIO_DisablePinInput))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = FL_GPIO_DisablePinInput
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_GPIO_Init
</UL>

<P><STRONG><a name="[d3]"></a>FL_GPIO_DisablePinOpenDrain</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, fm33lg0xx_fl_gpio.o(.text.FL_GPIO_DisablePinOpenDrain))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = FL_GPIO_DisablePinOpenDrain
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_GPIO_Init
</UL>

<P><STRONG><a name="[d2]"></a>FL_GPIO_DisablePinPullup</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, fm33lg0xx_fl_gpio.o(.text.FL_GPIO_DisablePinPullup))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = FL_GPIO_DisablePinPullup
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_GPIO_Init
</UL>

<P><STRONG><a name="[da]"></a>FL_GPIO_DisablePinRemap</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, fm33lg0xx_fl_gpio.o(.text.FL_GPIO_DisablePinRemap))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = FL_GPIO_DisablePinRemap
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_GPIO_Init
</UL>

<P><STRONG><a name="[d4]"></a>FL_GPIO_EnablePinAnalogSwitch</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, fm33lg0xx_fl_gpio.o(.text.FL_GPIO_EnablePinAnalogSwitch))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = FL_GPIO_EnablePinAnalogSwitch
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_GPIO_Init
</UL>

<P><STRONG><a name="[d6]"></a>FL_GPIO_EnablePinInput</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, fm33lg0xx_fl_gpio.o(.text.FL_GPIO_EnablePinInput))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = FL_GPIO_EnablePinInput
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_GPIO_Init
</UL>

<P><STRONG><a name="[d7]"></a>FL_GPIO_EnablePinOpenDrain</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, fm33lg0xx_fl_gpio.o(.text.FL_GPIO_EnablePinOpenDrain))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = FL_GPIO_EnablePinOpenDrain
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_GPIO_Init
</UL>

<P><STRONG><a name="[d8]"></a>FL_GPIO_EnablePinPullup</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, fm33lg0xx_fl_gpio.o(.text.FL_GPIO_EnablePinPullup))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = FL_GPIO_EnablePinPullup
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_GPIO_Init
</UL>

<P><STRONG><a name="[d9]"></a>FL_GPIO_EnablePinRemap</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, fm33lg0xx_fl_gpio.o(.text.FL_GPIO_EnablePinRemap))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = FL_GPIO_EnablePinRemap
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_GPIO_Init
</UL>

<P><STRONG><a name="[db]"></a>FL_GPIO_SetPinMode</STRONG> (Thumb, 36 bytes, Stack size 12 bytes, fm33lg0xx_fl_gpio.o(.text.FL_GPIO_SetPinMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = FL_GPIO_SetPinMode
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_GPIO_Init
</UL>

<P><STRONG><a name="[54]"></a>_dadd1</STRONG> (Thumb, 290 bytes, Stack size 20 bytes, daddsub.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drsb
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd
</UL>

<P><STRONG><a name="[53]"></a>_dsub1</STRONG> (Thumb, 470 bytes, Stack size 40 bytes, daddsub.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drsb
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd
</UL>

<P><STRONG><a name="[20e]"></a>_fadd1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, faddsub.o(x$fpl$fadd), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fsub
</UL>

<P><STRONG><a name="[20c]"></a>_fsub1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, faddsub.o(x$fpl$fsub), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fadd
</UL>
<P>
<H3>
Undefined Global Symbols
</H3>
<P><STRONG><a name="[6b]"></a>_call_atexit_fns</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>
<HR></body></html>
